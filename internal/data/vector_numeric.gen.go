// Code generated by ./internal/data/vector_numeric.gen.go.tmpl. DO NOT EDIT.
package data

import (
	"reflect"

	"github.com/zeroshade/go-drill/internal/rpc/proto/exec/shared"
)

// Int64 vector

type Int64Vector struct {
	values []int64
	meta   *shared.SerializedField
}

func (Int64Vector) Type() reflect.Type {
	return reflect.TypeOf(int64(0))
}

func (Int64Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Int64Vector) Len() int {
	return int(len(v.values))
}

func (v *Int64Vector) Get(index uint) int64 {
	return v.values[index]
}

func (v *Int64Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewInt64Vector(data []byte, meta *shared.SerializedField) *Int64Vector {
	return &Int64Vector{
		values: Int64Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableInt64Vector struct {
	*Int64Vector

	byteMap []byte
}

func (nv *NullableInt64Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableInt64Vector) Get(index uint) *int64 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableInt64Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableInt64Vector(data []byte, meta *shared.SerializedField) *NullableInt64Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableInt64Vector{
		NewInt64Vector(remaining, meta),
		byteMap,
	}
}

// Int32 vector

type Int32Vector struct {
	values []int32
	meta   *shared.SerializedField
}

func (Int32Vector) Type() reflect.Type {
	return reflect.TypeOf(int32(0))
}

func (Int32Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Int32Vector) Len() int {
	return int(len(v.values))
}

func (v *Int32Vector) Get(index uint) int32 {
	return v.values[index]
}

func (v *Int32Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewInt32Vector(data []byte, meta *shared.SerializedField) *Int32Vector {
	return &Int32Vector{
		values: Int32Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableInt32Vector struct {
	*Int32Vector

	byteMap []byte
}

func (nv *NullableInt32Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableInt32Vector) Get(index uint) *int32 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableInt32Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableInt32Vector(data []byte, meta *shared.SerializedField) *NullableInt32Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableInt32Vector{
		NewInt32Vector(remaining, meta),
		byteMap,
	}
}

// Float64 vector

type Float64Vector struct {
	values []float64
	meta   *shared.SerializedField
}

func (Float64Vector) Type() reflect.Type {
	return reflect.TypeOf(float64(0))
}

func (Float64Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Float64Vector) Len() int {
	return int(len(v.values))
}

func (v *Float64Vector) Get(index uint) float64 {
	return v.values[index]
}

func (v *Float64Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewFloat64Vector(data []byte, meta *shared.SerializedField) *Float64Vector {
	return &Float64Vector{
		values: Float64Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableFloat64Vector struct {
	*Float64Vector

	byteMap []byte
}

func (nv *NullableFloat64Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableFloat64Vector) Get(index uint) *float64 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableFloat64Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableFloat64Vector(data []byte, meta *shared.SerializedField) *NullableFloat64Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableFloat64Vector{
		NewFloat64Vector(remaining, meta),
		byteMap,
	}
}

// Uint64 vector

type Uint64Vector struct {
	values []uint64
	meta   *shared.SerializedField
}

func (Uint64Vector) Type() reflect.Type {
	return reflect.TypeOf(uint64(0))
}

func (Uint64Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Uint64Vector) Len() int {
	return int(len(v.values))
}

func (v *Uint64Vector) Get(index uint) uint64 {
	return v.values[index]
}

func (v *Uint64Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewUint64Vector(data []byte, meta *shared.SerializedField) *Uint64Vector {
	return &Uint64Vector{
		values: Uint64Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableUint64Vector struct {
	*Uint64Vector

	byteMap []byte
}

func (nv *NullableUint64Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableUint64Vector) Get(index uint) *uint64 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableUint64Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableUint64Vector(data []byte, meta *shared.SerializedField) *NullableUint64Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableUint64Vector{
		NewUint64Vector(remaining, meta),
		byteMap,
	}
}

// Uint32 vector

type Uint32Vector struct {
	values []uint32
	meta   *shared.SerializedField
}

func (Uint32Vector) Type() reflect.Type {
	return reflect.TypeOf(uint32(0))
}

func (Uint32Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Uint32Vector) Len() int {
	return int(len(v.values))
}

func (v *Uint32Vector) Get(index uint) uint32 {
	return v.values[index]
}

func (v *Uint32Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewUint32Vector(data []byte, meta *shared.SerializedField) *Uint32Vector {
	return &Uint32Vector{
		values: Uint32Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableUint32Vector struct {
	*Uint32Vector

	byteMap []byte
}

func (nv *NullableUint32Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableUint32Vector) Get(index uint) *uint32 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableUint32Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableUint32Vector(data []byte, meta *shared.SerializedField) *NullableUint32Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableUint32Vector{
		NewUint32Vector(remaining, meta),
		byteMap,
	}
}

// Float32 vector

type Float32Vector struct {
	values []float32
	meta   *shared.SerializedField
}

func (Float32Vector) Type() reflect.Type {
	return reflect.TypeOf(float32(0))
}

func (Float32Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Float32Vector) Len() int {
	return int(len(v.values))
}

func (v *Float32Vector) Get(index uint) float32 {
	return v.values[index]
}

func (v *Float32Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewFloat32Vector(data []byte, meta *shared.SerializedField) *Float32Vector {
	return &Float32Vector{
		values: Float32Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableFloat32Vector struct {
	*Float32Vector

	byteMap []byte
}

func (nv *NullableFloat32Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableFloat32Vector) Get(index uint) *float32 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableFloat32Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableFloat32Vector(data []byte, meta *shared.SerializedField) *NullableFloat32Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableFloat32Vector{
		NewFloat32Vector(remaining, meta),
		byteMap,
	}
}

// Int16 vector

type Int16Vector struct {
	values []int16
	meta   *shared.SerializedField
}

func (Int16Vector) Type() reflect.Type {
	return reflect.TypeOf(int16(0))
}

func (Int16Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Int16Vector) Len() int {
	return int(len(v.values))
}

func (v *Int16Vector) Get(index uint) int16 {
	return v.values[index]
}

func (v *Int16Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewInt16Vector(data []byte, meta *shared.SerializedField) *Int16Vector {
	return &Int16Vector{
		values: Int16Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableInt16Vector struct {
	*Int16Vector

	byteMap []byte
}

func (nv *NullableInt16Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableInt16Vector) Get(index uint) *int16 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableInt16Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableInt16Vector(data []byte, meta *shared.SerializedField) *NullableInt16Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableInt16Vector{
		NewInt16Vector(remaining, meta),
		byteMap,
	}
}

// Uint16 vector

type Uint16Vector struct {
	values []uint16
	meta   *shared.SerializedField
}

func (Uint16Vector) Type() reflect.Type {
	return reflect.TypeOf(uint16(0))
}

func (Uint16Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Uint16Vector) Len() int {
	return int(len(v.values))
}

func (v *Uint16Vector) Get(index uint) uint16 {
	return v.values[index]
}

func (v *Uint16Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewUint16Vector(data []byte, meta *shared.SerializedField) *Uint16Vector {
	return &Uint16Vector{
		values: Uint16Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableUint16Vector struct {
	*Uint16Vector

	byteMap []byte
}

func (nv *NullableUint16Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableUint16Vector) Get(index uint) *uint16 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableUint16Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableUint16Vector(data []byte, meta *shared.SerializedField) *NullableUint16Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableUint16Vector{
		NewUint16Vector(remaining, meta),
		byteMap,
	}
}

// Int8 vector

type Int8Vector struct {
	values []int8
	meta   *shared.SerializedField
}

func (Int8Vector) Type() reflect.Type {
	return reflect.TypeOf(int8(0))
}

func (Int8Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Int8Vector) Len() int {
	return int(len(v.values))
}

func (v *Int8Vector) Get(index uint) int8 {
	return v.values[index]
}

func (v *Int8Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewInt8Vector(data []byte, meta *shared.SerializedField) *Int8Vector {
	return &Int8Vector{
		values: Int8Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableInt8Vector struct {
	*Int8Vector

	byteMap []byte
}

func (nv *NullableInt8Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableInt8Vector) Get(index uint) *int8 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableInt8Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableInt8Vector(data []byte, meta *shared.SerializedField) *NullableInt8Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableInt8Vector{
		NewInt8Vector(remaining, meta),
		byteMap,
	}
}

// Uint8 vector

type Uint8Vector struct {
	values []uint8
	meta   *shared.SerializedField
}

func (Uint8Vector) Type() reflect.Type {
	return reflect.TypeOf(uint8(0))
}

func (Uint8Vector) TypeLen() (int64, bool) {
	return 0, false
}

func (v *Uint8Vector) Len() int {
	return int(len(v.values))
}

func (v *Uint8Vector) Get(index uint) uint8 {
	return v.values[index]
}

func (v *Uint8Vector) Value(index uint) interface{} {
	return v.Get(index)
}

func NewUint8Vector(data []byte, meta *shared.SerializedField) *Uint8Vector {
	return &Uint8Vector{
		values: Uint8Traits.CastFromBytes(data),
		meta:   meta,
	}
}

type NullableUint8Vector struct {
	*Uint8Vector

	byteMap []byte
}

func (nv *NullableUint8Vector) IsNull(index uint) bool {
	return nv.byteMap[index] == 0
}

func (nv *NullableUint8Vector) Get(index uint) *uint8 {
	if nv.IsNull(index) {
		return nil
	}

	return &nv.values[index]
}

func (nv *NullableUint8Vector) Value(index uint) interface{} {
	return nv.Get(index)
}

func NewNullableUint8Vector(data []byte, meta *shared.SerializedField) *NullableUint8Vector {
	byteMap := data[:meta.GetValueCount()]
	remaining := data[meta.GetValueCount():]

	return &NullableUint8Vector{
		NewUint8Vector(remaining, meta),
		byteMap,
	}
}
