// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: Types.proto

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MinorType int32

const (
	MinorType_LATE            MinorType = 0  //  late binding type
	MinorType_MAP             MinorType = 1  //  an empty map column.  Useful for conceptual setup.  Children listed within here
	MinorType_TINYINT         MinorType = 3  //  single byte signed integer
	MinorType_SMALLINT        MinorType = 4  //  two byte signed integer
	MinorType_INT             MinorType = 5  //  four byte signed integer
	MinorType_BIGINT          MinorType = 6  //  eight byte signed integer
	MinorType_DECIMAL9        MinorType = 7  //  a decimal supporting precision between 1 and 9
	MinorType_DECIMAL18       MinorType = 8  //  a decimal supporting precision between 10 and 18
	MinorType_DECIMAL28SPARSE MinorType = 9  //  a decimal supporting precision between 19 and 28
	MinorType_DECIMAL38SPARSE MinorType = 10 //  a decimal supporting precision between 29 and 38
	MinorType_MONEY           MinorType = 11 //  signed decimal with two digit precision
	MinorType_DATE            MinorType = 12 //  days since 4713bc
	MinorType_TIME            MinorType = 13 //  time in micros before or after 2000/1/1
	MinorType_TIMETZ          MinorType = 14 //  time in micros before or after 2000/1/1 with timezone
	MinorType_TIMESTAMPTZ     MinorType = 15 //  unix epoch time in millis
	MinorType_TIMESTAMP       MinorType = 16 //  TBD
	MinorType_INTERVAL        MinorType = 17 //  TBD
	MinorType_FLOAT4          MinorType = 18 //  4 byte ieee 754
	MinorType_FLOAT8          MinorType = 19 //  8 byte ieee 754
	MinorType_BIT             MinorType = 20 //  single bit value (boolean)
	MinorType_FIXEDCHAR       MinorType = 21 //  utf8 fixed length string, padded with spaces
	MinorType_FIXED16CHAR     MinorType = 22
	MinorType_FIXEDBINARY     MinorType = 23 //  fixed length binary, padded with 0 bytes
	MinorType_VARCHAR         MinorType = 24 //  utf8 variable length string
	MinorType_VAR16CHAR       MinorType = 25 // utf16 variable length string
	MinorType_VARBINARY       MinorType = 26 //  variable length binary
	MinorType_UINT1           MinorType = 29 //  unsigned 1 byte integer
	MinorType_UINT2           MinorType = 30 //  unsigned 2 byte integer
	MinorType_UINT4           MinorType = 31 //  unsigned 4 byte integer
	MinorType_UINT8           MinorType = 32 //  unsigned 8 byte integer
	MinorType_DECIMAL28DENSE  MinorType = 33 // dense decimal representation, supporting precision between 19 and 28
	MinorType_DECIMAL38DENSE  MinorType = 34 // dense decimal representation, supporting precision between 28 and 38
	//    PROTO2 = 33;   //  protobuf encoded complex type. (up to 2^16 in length)
	//    PROTO4 = 34;   //  protobuf encoded complex type. (up to 2^32 in length)
	//    MSGPACK2 = 35;   //  msgpack encoded complex type. (up to 2^16 in length)
	//    MSGPACK4 = 36;   //  msgpack encoded complex type. (up to 2^32 in length)
	MinorType_NULL           MinorType = 37 // a value of unknown type (e.g. a missing reference).
	MinorType_INTERVALYEAR   MinorType = 38 // Interval type specifying YEAR to MONTH
	MinorType_INTERVALDAY    MinorType = 39 // Interval type specifying DAY to SECONDS
	MinorType_LIST           MinorType = 40
	MinorType_GENERIC_OBJECT MinorType = 41
	MinorType_UNION          MinorType = 42
	MinorType_VARDECIMAL     MinorType = 43 // variable width decimal (arbitrary precision)
	MinorType_DICT           MinorType = 44
)

// Enum value maps for MinorType.
var (
	MinorType_name = map[int32]string{
		0:  "LATE",
		1:  "MAP",
		3:  "TINYINT",
		4:  "SMALLINT",
		5:  "INT",
		6:  "BIGINT",
		7:  "DECIMAL9",
		8:  "DECIMAL18",
		9:  "DECIMAL28SPARSE",
		10: "DECIMAL38SPARSE",
		11: "MONEY",
		12: "DATE",
		13: "TIME",
		14: "TIMETZ",
		15: "TIMESTAMPTZ",
		16: "TIMESTAMP",
		17: "INTERVAL",
		18: "FLOAT4",
		19: "FLOAT8",
		20: "BIT",
		21: "FIXEDCHAR",
		22: "FIXED16CHAR",
		23: "FIXEDBINARY",
		24: "VARCHAR",
		25: "VAR16CHAR",
		26: "VARBINARY",
		29: "UINT1",
		30: "UINT2",
		31: "UINT4",
		32: "UINT8",
		33: "DECIMAL28DENSE",
		34: "DECIMAL38DENSE",
		37: "NULL",
		38: "INTERVALYEAR",
		39: "INTERVALDAY",
		40: "LIST",
		41: "GENERIC_OBJECT",
		42: "UNION",
		43: "VARDECIMAL",
		44: "DICT",
	}
	MinorType_value = map[string]int32{
		"LATE":            0,
		"MAP":             1,
		"TINYINT":         3,
		"SMALLINT":        4,
		"INT":             5,
		"BIGINT":          6,
		"DECIMAL9":        7,
		"DECIMAL18":       8,
		"DECIMAL28SPARSE": 9,
		"DECIMAL38SPARSE": 10,
		"MONEY":           11,
		"DATE":            12,
		"TIME":            13,
		"TIMETZ":          14,
		"TIMESTAMPTZ":     15,
		"TIMESTAMP":       16,
		"INTERVAL":        17,
		"FLOAT4":          18,
		"FLOAT8":          19,
		"BIT":             20,
		"FIXEDCHAR":       21,
		"FIXED16CHAR":     22,
		"FIXEDBINARY":     23,
		"VARCHAR":         24,
		"VAR16CHAR":       25,
		"VARBINARY":       26,
		"UINT1":           29,
		"UINT2":           30,
		"UINT4":           31,
		"UINT8":           32,
		"DECIMAL28DENSE":  33,
		"DECIMAL38DENSE":  34,
		"NULL":            37,
		"INTERVALYEAR":    38,
		"INTERVALDAY":     39,
		"LIST":            40,
		"GENERIC_OBJECT":  41,
		"UNION":           42,
		"VARDECIMAL":      43,
		"DICT":            44,
	}
)

func (x MinorType) Enum() *MinorType {
	p := new(MinorType)
	*p = x
	return p
}

func (x MinorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinorType) Descriptor() protoreflect.EnumDescriptor {
	return file_Types_proto_enumTypes[0].Descriptor()
}

func (MinorType) Type() protoreflect.EnumType {
	return &file_Types_proto_enumTypes[0]
}

func (x MinorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MinorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MinorType(num)
	return nil
}

// Deprecated: Use MinorType.Descriptor instead.
func (MinorType) EnumDescriptor() ([]byte, []int) {
	return file_Types_proto_rawDescGZIP(), []int{0}
}

type DataMode int32

const (
	DataMode_OPTIONAL DataMode = 0 // nullable
	DataMode_REQUIRED DataMode = 1 // non-nullable
	DataMode_REPEATED DataMode = 2 // single, repeated-field
)

// Enum value maps for DataMode.
var (
	DataMode_name = map[int32]string{
		0: "OPTIONAL",
		1: "REQUIRED",
		2: "REPEATED",
	}
	DataMode_value = map[string]int32{
		"OPTIONAL": 0,
		"REQUIRED": 1,
		"REPEATED": 2,
	}
)

func (x DataMode) Enum() *DataMode {
	p := new(DataMode)
	*p = x
	return p
}

func (x DataMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataMode) Descriptor() protoreflect.EnumDescriptor {
	return file_Types_proto_enumTypes[1].Descriptor()
}

func (DataMode) Type() protoreflect.EnumType {
	return &file_Types_proto_enumTypes[1]
}

func (x DataMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataMode(num)
	return nil
}

// Deprecated: Use DataMode.Descriptor instead.
func (DataMode) EnumDescriptor() ([]byte, []int) {
	return file_Types_proto_rawDescGZIP(), []int{1}
}

type MajorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinorType *MinorType  `protobuf:"varint,1,opt,name=minor_type,json=minorType,enum=common.MinorType" json:"minor_type,omitempty"`
	Mode      *DataMode   `protobuf:"varint,2,opt,name=mode,enum=common.DataMode" json:"mode,omitempty"`
	Width     *int32      `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Precision *int32      `protobuf:"varint,4,opt,name=precision" json:"precision,omitempty"`                                  // used for decimal types or as optional length for fixed size value
	Scale     *int32      `protobuf:"varint,5,opt,name=scale" json:"scale,omitempty"`                                          // used for decimal types
	TimeZone  *int32      `protobuf:"varint,6,opt,name=timeZone" json:"timeZone,omitempty"`                                    // used by TimeStamp type
	SubType   []MinorType `protobuf:"varint,7,rep,name=sub_type,json=subType,enum=common.MinorType" json:"sub_type,omitempty"` // used by Union type
}

func (x *MajorType) Reset() {
	*x = MajorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MajorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MajorType) ProtoMessage() {}

func (x *MajorType) ProtoReflect() protoreflect.Message {
	mi := &file_Types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MajorType.ProtoReflect.Descriptor instead.
func (*MajorType) Descriptor() ([]byte, []int) {
	return file_Types_proto_rawDescGZIP(), []int{0}
}

func (x *MajorType) GetMinorType() MinorType {
	if x != nil && x.MinorType != nil {
		return *x.MinorType
	}
	return MinorType_LATE
}

func (x *MajorType) GetMode() DataMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return DataMode_OPTIONAL
}

func (x *MajorType) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *MajorType) GetPrecision() int32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *MajorType) GetScale() int32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *MajorType) GetTimeZone() int32 {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return 0
}

func (x *MajorType) GetSubType() []MinorType {
	if x != nil {
		return x.SubType
	}
	return nil
}

var File_Types_proto protoreflect.FileDescriptor

var file_Types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x2a,
	0xaf, 0x04, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x50, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4e, 0x59, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x47, 0x49, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x39, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x31, 0x38, 0x10, 0x08, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x32, 0x38, 0x53, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x33, 0x38, 0x53,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59,
	0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x45, 0x54, 0x5a,
	0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x54,
	0x5a, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x11,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x34, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x38, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x54, 0x10,
	0x14, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x58, 0x45, 0x44, 0x43, 0x48, 0x41, 0x52, 0x10, 0x15,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x31, 0x36, 0x43, 0x48, 0x41, 0x52, 0x10,
	0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59,
	0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x10, 0x18, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x41, 0x52, 0x31, 0x36, 0x43, 0x48, 0x41, 0x52, 0x10, 0x19, 0x12, 0x0d,
	0x0a, 0x09, 0x56, 0x41, 0x52, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x1a, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54,
	0x32, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x34, 0x10, 0x1f, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x32, 0x38, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x21, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x33, 0x38, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x10,
	0x22, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x25, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x59, 0x45, 0x41, 0x52, 0x10, 0x26, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x44, 0x41, 0x59, 0x10, 0x27, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x28, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x49, 0x43, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x29, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x52, 0x44, 0x45,
	0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x2b, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x43, 0x54, 0x10,
	0x2c, 0x2a, 0x34, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x66, 0x0a, 0x1d, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2d,
	0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
}

var (
	file_Types_proto_rawDescOnce sync.Once
	file_Types_proto_rawDescData = file_Types_proto_rawDesc
)

func file_Types_proto_rawDescGZIP() []byte {
	file_Types_proto_rawDescOnce.Do(func() {
		file_Types_proto_rawDescData = protoimpl.X.CompressGZIP(file_Types_proto_rawDescData)
	})
	return file_Types_proto_rawDescData
}

var file_Types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_Types_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Types_proto_goTypes = []interface{}{
	(MinorType)(0),    // 0: common.MinorType
	(DataMode)(0),     // 1: common.DataMode
	(*MajorType)(nil), // 2: common.MajorType
}
var file_Types_proto_depIdxs = []int32{
	0, // 0: common.MajorType.minor_type:type_name -> common.MinorType
	1, // 1: common.MajorType.mode:type_name -> common.DataMode
	0, // 2: common.MajorType.sub_type:type_name -> common.MinorType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_Types_proto_init() }
func file_Types_proto_init() {
	if File_Types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MajorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Types_proto_goTypes,
		DependencyIndexes: file_Types_proto_depIdxs,
		EnumInfos:         file_Types_proto_enumTypes,
		MessageInfos:      file_Types_proto_msgTypes,
	}.Build()
	File_Types_proto = out.File
	file_Types_proto_rawDesc = nil
	file_Types_proto_goTypes = nil
	file_Types_proto_depIdxs = nil
}
