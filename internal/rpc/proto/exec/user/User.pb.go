// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: User.proto

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package user

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/factset/go-drill/internal/rpc/proto/common"
	_ "github.com/factset/go-drill/internal/rpc/proto/exec"
	_ "github.com/factset/go-drill/internal/rpc/proto/exec/bit"
	control "github.com/factset/go-drill/internal/rpc/proto/exec/bit/control"
	_ "github.com/factset/go-drill/internal/rpc/proto/exec/bit/data"
	shared "github.com/factset/go-drill/internal/rpc/proto/exec/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

////// User <-> Bit RPC ///////
type RpcType int32

const (
	RpcType_HANDSHAKE RpcType = 0
	RpcType_ACK       RpcType = 1
	RpcType_GOODBYE   RpcType = 2
	// user to bit
	RpcType_RUN_QUERY                 RpcType = 3 // user is submitting a new query to the drillbit
	RpcType_CANCEL_QUERY              RpcType = 4 // user is sending a query cancellation request to the drillbit
	RpcType_REQUEST_RESULTS           RpcType = 5
	RpcType_RESUME_PAUSED_QUERY       RpcType = 11 // user is sending a query resume request to the drillbit
	RpcType_GET_QUERY_PLAN_FRAGMENTS  RpcType = 12 // to get plan fragments from query
	RpcType_GET_CATALOGS              RpcType = 14 // user is requesting metadata of catalog(s).
	RpcType_GET_SCHEMAS               RpcType = 15 // user is requesting metadata of schema(s)
	RpcType_GET_TABLES                RpcType = 16 // user is requesting metadata of table(s)
	RpcType_GET_COLUMNS               RpcType = 17 // user is requesting metadata of column(s)
	RpcType_CREATE_PREPARED_STATEMENT RpcType = 22 // user is sending a request to create prepared statement
	RpcType_GET_SERVER_META           RpcType = 8  // user is sending a request to receive server metadata
	// bit to user
	RpcType_QUERY_DATA           RpcType = 6 // drillbit is sending a query result data batch to the user
	RpcType_QUERY_HANDLE         RpcType = 7
	RpcType_QUERY_PLAN_FRAGMENTS RpcType = 13 // return plan fragments
	RpcType_CATALOGS             RpcType = 18 // return catalogs metadata in response to GET_CATALOGS
	RpcType_SCHEMAS              RpcType = 19 // return schema metadata in response to GET_SCHEMAS
	RpcType_TABLES               RpcType = 20 // return table metadata in response to GET_TABLES
	RpcType_COLUMNS              RpcType = 21 // return column metadata in response to GET_COLUMNS
	RpcType_PREPARED_STATEMENT   RpcType = 23 // return preparated statement in response to CREATE_PREPARED_STATEMENT
	RpcType_SERVER_META          RpcType = 9  // return server infos in respose to GET_SERVER_META
	RpcType_QUERY_RESULT         RpcType = 10 // drillbit is reporting a query status change, most likely a terminal message, to the user
	// user to bit and bit to user
	RpcType_SASL_MESSAGE RpcType = 24
)

// Enum value maps for RpcType.
var (
	RpcType_name = map[int32]string{
		0:  "HANDSHAKE",
		1:  "ACK",
		2:  "GOODBYE",
		3:  "RUN_QUERY",
		4:  "CANCEL_QUERY",
		5:  "REQUEST_RESULTS",
		11: "RESUME_PAUSED_QUERY",
		12: "GET_QUERY_PLAN_FRAGMENTS",
		14: "GET_CATALOGS",
		15: "GET_SCHEMAS",
		16: "GET_TABLES",
		17: "GET_COLUMNS",
		22: "CREATE_PREPARED_STATEMENT",
		8:  "GET_SERVER_META",
		6:  "QUERY_DATA",
		7:  "QUERY_HANDLE",
		13: "QUERY_PLAN_FRAGMENTS",
		18: "CATALOGS",
		19: "SCHEMAS",
		20: "TABLES",
		21: "COLUMNS",
		23: "PREPARED_STATEMENT",
		9:  "SERVER_META",
		10: "QUERY_RESULT",
		24: "SASL_MESSAGE",
	}
	RpcType_value = map[string]int32{
		"HANDSHAKE":                 0,
		"ACK":                       1,
		"GOODBYE":                   2,
		"RUN_QUERY":                 3,
		"CANCEL_QUERY":              4,
		"REQUEST_RESULTS":           5,
		"RESUME_PAUSED_QUERY":       11,
		"GET_QUERY_PLAN_FRAGMENTS":  12,
		"GET_CATALOGS":              14,
		"GET_SCHEMAS":               15,
		"GET_TABLES":                16,
		"GET_COLUMNS":               17,
		"CREATE_PREPARED_STATEMENT": 22,
		"GET_SERVER_META":           8,
		"QUERY_DATA":                6,
		"QUERY_HANDLE":              7,
		"QUERY_PLAN_FRAGMENTS":      13,
		"CATALOGS":                  18,
		"SCHEMAS":                   19,
		"TABLES":                    20,
		"COLUMNS":                   21,
		"PREPARED_STATEMENT":        23,
		"SERVER_META":               9,
		"QUERY_RESULT":              10,
		"SASL_MESSAGE":              24,
	}
)

func (x RpcType) Enum() *RpcType {
	p := new(RpcType)
	*p = x
	return p
}

func (x RpcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcType) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[0].Descriptor()
}

func (RpcType) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[0]
}

func (x RpcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RpcType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RpcType(num)
	return nil
}

// Deprecated: Use RpcType.Descriptor instead.
func (RpcType) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{0}
}

type SaslSupport int32

const (
	SaslSupport_UNKNOWN_SASL_SUPPORT SaslSupport = 0
	SaslSupport_SASL_AUTH            SaslSupport = 1
	SaslSupport_SASL_PRIVACY         SaslSupport = 2
)

// Enum value maps for SaslSupport.
var (
	SaslSupport_name = map[int32]string{
		0: "UNKNOWN_SASL_SUPPORT",
		1: "SASL_AUTH",
		2: "SASL_PRIVACY",
	}
	SaslSupport_value = map[string]int32{
		"UNKNOWN_SASL_SUPPORT": 0,
		"SASL_AUTH":            1,
		"SASL_PRIVACY":         2,
	}
)

func (x SaslSupport) Enum() *SaslSupport {
	p := new(SaslSupport)
	*p = x
	return p
}

func (x SaslSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaslSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[1].Descriptor()
}

func (SaslSupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[1]
}

func (x SaslSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SaslSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SaslSupport(num)
	return nil
}

// Deprecated: Use SaslSupport.Descriptor instead.
func (SaslSupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{1}
}

type QueryResultsMode int32

const (
	QueryResultsMode_STREAM_FULL QueryResultsMode = 1 // Server will inform the client regularly on the status of the query. Once the query is completed, service will inform the client as each query chunk is made available.
)

// Enum value maps for QueryResultsMode.
var (
	QueryResultsMode_name = map[int32]string{
		1: "STREAM_FULL",
	}
	QueryResultsMode_value = map[string]int32{
		"STREAM_FULL": 1,
	}
)

func (x QueryResultsMode) Enum() *QueryResultsMode {
	p := new(QueryResultsMode)
	*p = x
	return p
}

func (x QueryResultsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryResultsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[2].Descriptor()
}

func (QueryResultsMode) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[2]
}

func (x QueryResultsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QueryResultsMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QueryResultsMode(num)
	return nil
}

// Deprecated: Use QueryResultsMode.Descriptor instead.
func (QueryResultsMode) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{2}
}

type HandshakeStatus int32

const (
	HandshakeStatus_SUCCESS              HandshakeStatus = 1 // Handshake is successful (including authentication if any)
	HandshakeStatus_RPC_VERSION_MISMATCH HandshakeStatus = 2 // Client and Server RPC versions are different
	HandshakeStatus_AUTH_FAILED          HandshakeStatus = 3 // User authentication failed
	HandshakeStatus_UNKNOWN_FAILURE      HandshakeStatus = 4 // Unknown failure, refer to the error message for more details
	HandshakeStatus_AUTH_REQUIRED        HandshakeStatus = 5 // User authentication required
)

// Enum value maps for HandshakeStatus.
var (
	HandshakeStatus_name = map[int32]string{
		1: "SUCCESS",
		2: "RPC_VERSION_MISMATCH",
		3: "AUTH_FAILED",
		4: "UNKNOWN_FAILURE",
		5: "AUTH_REQUIRED",
	}
	HandshakeStatus_value = map[string]int32{
		"SUCCESS":              1,
		"RPC_VERSION_MISMATCH": 2,
		"AUTH_FAILED":          3,
		"UNKNOWN_FAILURE":      4,
		"AUTH_REQUIRED":        5,
	}
)

func (x HandshakeStatus) Enum() *HandshakeStatus {
	p := new(HandshakeStatus)
	*p = x
	return p
}

func (x HandshakeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandshakeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[3].Descriptor()
}

func (HandshakeStatus) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[3]
}

func (x HandshakeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HandshakeStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HandshakeStatus(num)
	return nil
}

// Deprecated: Use HandshakeStatus.Descriptor instead.
func (HandshakeStatus) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{3}
}

//
// Enum indicating the request status.
type RequestStatus int32

const (
	RequestStatus_UNKNOWN_STATUS RequestStatus = 0
	RequestStatus_OK             RequestStatus = 1
	RequestStatus_FAILED         RequestStatus = 2
	//*
	// Request timed out. Futher attempts can change any API specific parameters and retry or just retry the request.
	RequestStatus_TIMEOUT RequestStatus = 3
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "OK",
		2: "FAILED",
		3: "TIMEOUT",
	}
	RequestStatus_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"OK":             1,
		"FAILED":         2,
		"TIMEOUT":        3,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[4].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[4]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestStatus(num)
	return nil
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{4}
}

//
// How a column can be used in WHERE clause
type ColumnSearchability int32

const (
	ColumnSearchability_UNKNOWN_SEARCHABILITY ColumnSearchability = 0
	ColumnSearchability_NONE                  ColumnSearchability = 1 // can't be used in WHERE clause
	ColumnSearchability_CHAR                  ColumnSearchability = 2 // can be used in WHERE clause but only with LIKE predicate
	ColumnSearchability_NUMBER                ColumnSearchability = 3 // can be used in a WHERE clause with all the comparison operators except LIKE
	ColumnSearchability_ALL                   ColumnSearchability = 4 // can be used in a WHERE clause with all the comparison operators
)

// Enum value maps for ColumnSearchability.
var (
	ColumnSearchability_name = map[int32]string{
		0: "UNKNOWN_SEARCHABILITY",
		1: "NONE",
		2: "CHAR",
		3: "NUMBER",
		4: "ALL",
	}
	ColumnSearchability_value = map[string]int32{
		"UNKNOWN_SEARCHABILITY": 0,
		"NONE":                  1,
		"CHAR":                  2,
		"NUMBER":                3,
		"ALL":                   4,
	}
)

func (x ColumnSearchability) Enum() *ColumnSearchability {
	p := new(ColumnSearchability)
	*p = x
	return p
}

func (x ColumnSearchability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnSearchability) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[5].Descriptor()
}

func (ColumnSearchability) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[5]
}

func (x ColumnSearchability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnSearchability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnSearchability(num)
	return nil
}

// Deprecated: Use ColumnSearchability.Descriptor instead.
func (ColumnSearchability) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{5}
}

//
// Whether a column can be updatable.
type ColumnUpdatability int32

const (
	ColumnUpdatability_UNKNOWN_UPDATABILITY ColumnUpdatability = 0
	ColumnUpdatability_READ_ONLY            ColumnUpdatability = 1
	ColumnUpdatability_WRITABLE             ColumnUpdatability = 2
)

// Enum value maps for ColumnUpdatability.
var (
	ColumnUpdatability_name = map[int32]string{
		0: "UNKNOWN_UPDATABILITY",
		1: "READ_ONLY",
		2: "WRITABLE",
	}
	ColumnUpdatability_value = map[string]int32{
		"UNKNOWN_UPDATABILITY": 0,
		"READ_ONLY":            1,
		"WRITABLE":             2,
	}
)

func (x ColumnUpdatability) Enum() *ColumnUpdatability {
	p := new(ColumnUpdatability)
	*p = x
	return p
}

func (x ColumnUpdatability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnUpdatability) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[6].Descriptor()
}

func (ColumnUpdatability) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[6]
}

func (x ColumnUpdatability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnUpdatability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnUpdatability(num)
	return nil
}

// Deprecated: Use ColumnUpdatability.Descriptor instead.
func (ColumnUpdatability) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{6}
}

type CollateSupport int32

const (
	CollateSupport_CS_UNKNOWN  CollateSupport = 0 // Unknown support (for forward compatibility)
	CollateSupport_CS_GROUP_BY CollateSupport = 1 // COLLATE clause can be added after each grouping column
)

// Enum value maps for CollateSupport.
var (
	CollateSupport_name = map[int32]string{
		0: "CS_UNKNOWN",
		1: "CS_GROUP_BY",
	}
	CollateSupport_value = map[string]int32{
		"CS_UNKNOWN":  0,
		"CS_GROUP_BY": 1,
	}
)

func (x CollateSupport) Enum() *CollateSupport {
	p := new(CollateSupport)
	*p = x
	return p
}

func (x CollateSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollateSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[7].Descriptor()
}

func (CollateSupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[7]
}

func (x CollateSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CollateSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CollateSupport(num)
	return nil
}

// Deprecated: Use CollateSupport.Descriptor instead.
func (CollateSupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{7}
}

type CorrelationNamesSupport int32

const (
	CorrelationNamesSupport_CN_NONE            CorrelationNamesSupport = 1 // Correlation names are not supported
	CorrelationNamesSupport_CN_DIFFERENT_NAMES CorrelationNamesSupport = 2 // Correlation names are supported, but names have to
	// be different from the tables they represent
	CorrelationNamesSupport_CN_ANY CorrelationNamesSupport = 3 // Correlation names are supported without restriction
)

// Enum value maps for CorrelationNamesSupport.
var (
	CorrelationNamesSupport_name = map[int32]string{
		1: "CN_NONE",
		2: "CN_DIFFERENT_NAMES",
		3: "CN_ANY",
	}
	CorrelationNamesSupport_value = map[string]int32{
		"CN_NONE":            1,
		"CN_DIFFERENT_NAMES": 2,
		"CN_ANY":             3,
	}
)

func (x CorrelationNamesSupport) Enum() *CorrelationNamesSupport {
	p := new(CorrelationNamesSupport)
	*p = x
	return p
}

func (x CorrelationNamesSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorrelationNamesSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[8].Descriptor()
}

func (CorrelationNamesSupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[8]
}

func (x CorrelationNamesSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CorrelationNamesSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CorrelationNamesSupport(num)
	return nil
}

// Deprecated: Use CorrelationNamesSupport.Descriptor instead.
func (CorrelationNamesSupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{8}
}

type DateTimeLiteralsSupport int32

const (
	DateTimeLiteralsSupport_DL_UNKNOWN                   DateTimeLiteralsSupport = 0  // Unknown support (for forward compatibility)
	DateTimeLiteralsSupport_DL_DATE                      DateTimeLiteralsSupport = 1  // DATE literal is supported
	DateTimeLiteralsSupport_DL_TIME                      DateTimeLiteralsSupport = 2  // TIME literal is supported
	DateTimeLiteralsSupport_DL_TIMESTAMP                 DateTimeLiteralsSupport = 3  // TIMESTAMP literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_YEAR             DateTimeLiteralsSupport = 4  // INTERVAL YEAR literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_MONTH            DateTimeLiteralsSupport = 5  // INTERVAL MONTH literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_DAY              DateTimeLiteralsSupport = 6  // INTERVAL DAY literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_HOUR             DateTimeLiteralsSupport = 7  // INTERVAL HOUR literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_MINUTE           DateTimeLiteralsSupport = 8  // INTERVAL MINUTE literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_SECOND           DateTimeLiteralsSupport = 9  // INTERVAL SECOND literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_YEAR_TO_MONTH    DateTimeLiteralsSupport = 10 // INTERVAL YEAR TO MONTH literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_DAY_TO_HOUR      DateTimeLiteralsSupport = 11 // INTERVAL DAY TO HOUR literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_DAY_TO_MINUTE    DateTimeLiteralsSupport = 12 // INTERVAL DAY TO MINUTE literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_DAY_TO_SECOND    DateTimeLiteralsSupport = 13 // INTERVAL DAY TO SECOND literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_HOUR_TO_MINUTE   DateTimeLiteralsSupport = 14 // INTERVAL HOUR TO MINUTE literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_HOUR_TO_SECOND   DateTimeLiteralsSupport = 15 // INTERVAL HOUR TO SECOND literal is supported
	DateTimeLiteralsSupport_DL_INTERVAL_MINUTE_TO_SECOND DateTimeLiteralsSupport = 16 // INTERVAL MINUTE TO SECOND literal is supported
)

// Enum value maps for DateTimeLiteralsSupport.
var (
	DateTimeLiteralsSupport_name = map[int32]string{
		0:  "DL_UNKNOWN",
		1:  "DL_DATE",
		2:  "DL_TIME",
		3:  "DL_TIMESTAMP",
		4:  "DL_INTERVAL_YEAR",
		5:  "DL_INTERVAL_MONTH",
		6:  "DL_INTERVAL_DAY",
		7:  "DL_INTERVAL_HOUR",
		8:  "DL_INTERVAL_MINUTE",
		9:  "DL_INTERVAL_SECOND",
		10: "DL_INTERVAL_YEAR_TO_MONTH",
		11: "DL_INTERVAL_DAY_TO_HOUR",
		12: "DL_INTERVAL_DAY_TO_MINUTE",
		13: "DL_INTERVAL_DAY_TO_SECOND",
		14: "DL_INTERVAL_HOUR_TO_MINUTE",
		15: "DL_INTERVAL_HOUR_TO_SECOND",
		16: "DL_INTERVAL_MINUTE_TO_SECOND",
	}
	DateTimeLiteralsSupport_value = map[string]int32{
		"DL_UNKNOWN":                   0,
		"DL_DATE":                      1,
		"DL_TIME":                      2,
		"DL_TIMESTAMP":                 3,
		"DL_INTERVAL_YEAR":             4,
		"DL_INTERVAL_MONTH":            5,
		"DL_INTERVAL_DAY":              6,
		"DL_INTERVAL_HOUR":             7,
		"DL_INTERVAL_MINUTE":           8,
		"DL_INTERVAL_SECOND":           9,
		"DL_INTERVAL_YEAR_TO_MONTH":    10,
		"DL_INTERVAL_DAY_TO_HOUR":      11,
		"DL_INTERVAL_DAY_TO_MINUTE":    12,
		"DL_INTERVAL_DAY_TO_SECOND":    13,
		"DL_INTERVAL_HOUR_TO_MINUTE":   14,
		"DL_INTERVAL_HOUR_TO_SECOND":   15,
		"DL_INTERVAL_MINUTE_TO_SECOND": 16,
	}
)

func (x DateTimeLiteralsSupport) Enum() *DateTimeLiteralsSupport {
	p := new(DateTimeLiteralsSupport)
	*p = x
	return p
}

func (x DateTimeLiteralsSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTimeLiteralsSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[9].Descriptor()
}

func (DateTimeLiteralsSupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[9]
}

func (x DateTimeLiteralsSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DateTimeLiteralsSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DateTimeLiteralsSupport(num)
	return nil
}

// Deprecated: Use DateTimeLiteralsSupport.Descriptor instead.
func (DateTimeLiteralsSupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{9}
}

type GroupBySupport int32

const (
	GroupBySupport_GB_NONE          GroupBySupport = 1 // Group by is not supported
	GroupBySupport_GB_SELECT_ONLY   GroupBySupport = 2 // Group by supported with non aggregated columns in select
	GroupBySupport_GB_BEYOND_SELECT GroupBySupport = 3
	GroupBySupport_GB_UNRELATED     GroupBySupport = 4 // Group by supported with columns absent from the select list
)

// Enum value maps for GroupBySupport.
var (
	GroupBySupport_name = map[int32]string{
		1: "GB_NONE",
		2: "GB_SELECT_ONLY",
		3: "GB_BEYOND_SELECT",
		4: "GB_UNRELATED",
	}
	GroupBySupport_value = map[string]int32{
		"GB_NONE":          1,
		"GB_SELECT_ONLY":   2,
		"GB_BEYOND_SELECT": 3,
		"GB_UNRELATED":     4,
	}
)

func (x GroupBySupport) Enum() *GroupBySupport {
	p := new(GroupBySupport)
	*p = x
	return p
}

func (x GroupBySupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupBySupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[10].Descriptor()
}

func (GroupBySupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[10]
}

func (x GroupBySupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupBySupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupBySupport(num)
	return nil
}

// Deprecated: Use GroupBySupport.Descriptor instead.
func (GroupBySupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{10}
}

type IdentifierCasing int32

const (
	IdentifierCasing_IC_UNKNOWN        IdentifierCasing = 0 // Unknown support (for forward compatibility)
	IdentifierCasing_IC_STORES_LOWER   IdentifierCasing = 1
	IdentifierCasing_IC_STORES_MIXED   IdentifierCasing = 2
	IdentifierCasing_IC_STORES_UPPER   IdentifierCasing = 3
	IdentifierCasing_IC_SUPPORTS_MIXED IdentifierCasing = 4
)

// Enum value maps for IdentifierCasing.
var (
	IdentifierCasing_name = map[int32]string{
		0: "IC_UNKNOWN",
		1: "IC_STORES_LOWER",
		2: "IC_STORES_MIXED",
		3: "IC_STORES_UPPER",
		4: "IC_SUPPORTS_MIXED",
	}
	IdentifierCasing_value = map[string]int32{
		"IC_UNKNOWN":        0,
		"IC_STORES_LOWER":   1,
		"IC_STORES_MIXED":   2,
		"IC_STORES_UPPER":   3,
		"IC_SUPPORTS_MIXED": 4,
	}
)

func (x IdentifierCasing) Enum() *IdentifierCasing {
	p := new(IdentifierCasing)
	*p = x
	return p
}

func (x IdentifierCasing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierCasing) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[11].Descriptor()
}

func (IdentifierCasing) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[11]
}

func (x IdentifierCasing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IdentifierCasing) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IdentifierCasing(num)
	return nil
}

// Deprecated: Use IdentifierCasing.Descriptor instead.
func (IdentifierCasing) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{11}
}

type NullCollation int32

const (
	NullCollation_NC_UNKNOWN  NullCollation = 0 // Unknown support (for forward compatibility)
	NullCollation_NC_AT_START NullCollation = 1 // NULL values are sorted at the start regardless of the order
	NullCollation_NC_AT_END   NullCollation = 2 // NULL values are sorted at the end regardless of the order
	NullCollation_NC_HIGH     NullCollation = 3 // NULL is the highest value
	NullCollation_NC_LOW      NullCollation = 4 // NULL is the lowest value
)

// Enum value maps for NullCollation.
var (
	NullCollation_name = map[int32]string{
		0: "NC_UNKNOWN",
		1: "NC_AT_START",
		2: "NC_AT_END",
		3: "NC_HIGH",
		4: "NC_LOW",
	}
	NullCollation_value = map[string]int32{
		"NC_UNKNOWN":  0,
		"NC_AT_START": 1,
		"NC_AT_END":   2,
		"NC_HIGH":     3,
		"NC_LOW":      4,
	}
)

func (x NullCollation) Enum() *NullCollation {
	p := new(NullCollation)
	*p = x
	return p
}

func (x NullCollation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullCollation) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[12].Descriptor()
}

func (NullCollation) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[12]
}

func (x NullCollation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NullCollation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NullCollation(num)
	return nil
}

// Deprecated: Use NullCollation.Descriptor instead.
func (NullCollation) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{12}
}

type OrderBySupport int32

const (
	OrderBySupport_OB_UNKNOWN    OrderBySupport = 0 // Unknown support (for forward compatibility)
	OrderBySupport_OB_UNRELATED  OrderBySupport = 1 // ORDER BY supported with columns not in SELECT list
	OrderBySupport_OB_EXPRESSION OrderBySupport = 2 // ORDER BY with expressions is supported
)

// Enum value maps for OrderBySupport.
var (
	OrderBySupport_name = map[int32]string{
		0: "OB_UNKNOWN",
		1: "OB_UNRELATED",
		2: "OB_EXPRESSION",
	}
	OrderBySupport_value = map[string]int32{
		"OB_UNKNOWN":    0,
		"OB_UNRELATED":  1,
		"OB_EXPRESSION": 2,
	}
)

func (x OrderBySupport) Enum() *OrderBySupport {
	p := new(OrderBySupport)
	*p = x
	return p
}

func (x OrderBySupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBySupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[13].Descriptor()
}

func (OrderBySupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[13]
}

func (x OrderBySupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderBySupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderBySupport(num)
	return nil
}

// Deprecated: Use OrderBySupport.Descriptor instead.
func (OrderBySupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{13}
}

type OuterJoinSupport int32

const (
	OuterJoinSupport_OJ_UNKNOWN            OuterJoinSupport = 0 // Unknown support (for forward compatibility)
	OuterJoinSupport_OJ_LEFT               OuterJoinSupport = 1 // Left outer join is supported
	OuterJoinSupport_OJ_RIGHT              OuterJoinSupport = 2 // Right outer join is supported
	OuterJoinSupport_OJ_FULL               OuterJoinSupport = 3 // Full outer join is supported
	OuterJoinSupport_OJ_NESTED             OuterJoinSupport = 4 // Nested outer join is supported
	OuterJoinSupport_OJ_NOT_ORDERED        OuterJoinSupport = 5
	OuterJoinSupport_OJ_INNER              OuterJoinSupport = 6 // Inner table can also be used in an inner join
	OuterJoinSupport_OJ_ALL_COMPARISON_OPS OuterJoinSupport = 7 // Any comparison operator is supported in the ON clause
)

// Enum value maps for OuterJoinSupport.
var (
	OuterJoinSupport_name = map[int32]string{
		0: "OJ_UNKNOWN",
		1: "OJ_LEFT",
		2: "OJ_RIGHT",
		3: "OJ_FULL",
		4: "OJ_NESTED",
		5: "OJ_NOT_ORDERED",
		6: "OJ_INNER",
		7: "OJ_ALL_COMPARISON_OPS",
	}
	OuterJoinSupport_value = map[string]int32{
		"OJ_UNKNOWN":            0,
		"OJ_LEFT":               1,
		"OJ_RIGHT":              2,
		"OJ_FULL":               3,
		"OJ_NESTED":             4,
		"OJ_NOT_ORDERED":        5,
		"OJ_INNER":              6,
		"OJ_ALL_COMPARISON_OPS": 7,
	}
)

func (x OuterJoinSupport) Enum() *OuterJoinSupport {
	p := new(OuterJoinSupport)
	*p = x
	return p
}

func (x OuterJoinSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OuterJoinSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[14].Descriptor()
}

func (OuterJoinSupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[14]
}

func (x OuterJoinSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OuterJoinSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OuterJoinSupport(num)
	return nil
}

// Deprecated: Use OuterJoinSupport.Descriptor instead.
func (OuterJoinSupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{14}
}

type SubQuerySupport int32

const (
	SubQuerySupport_SQ_UNKNOWN       SubQuerySupport = 0 // Unknown support (for forward compatibility)
	SubQuerySupport_SQ_CORRELATED    SubQuerySupport = 1 // Correlated subquery is supported
	SubQuerySupport_SQ_IN_COMPARISON SubQuerySupport = 2 // Subquery in comparison expression is supported
	SubQuerySupport_SQ_IN_EXISTS     SubQuerySupport = 3 // Subquery in EXISTS expression is supported
	SubQuerySupport_SQ_IN_INSERT     SubQuerySupport = 4 // Subquery in INSERT expression is supported
	SubQuerySupport_SQ_IN_QUANTIFIED SubQuerySupport = 5 // Subquery in quantified expression is supported
)

// Enum value maps for SubQuerySupport.
var (
	SubQuerySupport_name = map[int32]string{
		0: "SQ_UNKNOWN",
		1: "SQ_CORRELATED",
		2: "SQ_IN_COMPARISON",
		3: "SQ_IN_EXISTS",
		4: "SQ_IN_INSERT",
		5: "SQ_IN_QUANTIFIED",
	}
	SubQuerySupport_value = map[string]int32{
		"SQ_UNKNOWN":       0,
		"SQ_CORRELATED":    1,
		"SQ_IN_COMPARISON": 2,
		"SQ_IN_EXISTS":     3,
		"SQ_IN_INSERT":     4,
		"SQ_IN_QUANTIFIED": 5,
	}
)

func (x SubQuerySupport) Enum() *SubQuerySupport {
	p := new(SubQuerySupport)
	*p = x
	return p
}

func (x SubQuerySupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubQuerySupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[15].Descriptor()
}

func (SubQuerySupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[15]
}

func (x SubQuerySupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SubQuerySupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SubQuerySupport(num)
	return nil
}

// Deprecated: Use SubQuerySupport.Descriptor instead.
func (SubQuerySupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{15}
}

type UnionSupport int32

const (
	UnionSupport_U_UNKNOWN   UnionSupport = 0 // Unknown support (for forward compatibility)
	UnionSupport_U_UNION     UnionSupport = 1 // UNION is supported
	UnionSupport_U_UNION_ALL UnionSupport = 2 // UNION_ALL is supported
)

// Enum value maps for UnionSupport.
var (
	UnionSupport_name = map[int32]string{
		0: "U_UNKNOWN",
		1: "U_UNION",
		2: "U_UNION_ALL",
	}
	UnionSupport_value = map[string]int32{
		"U_UNKNOWN":   0,
		"U_UNION":     1,
		"U_UNION_ALL": 2,
	}
)

func (x UnionSupport) Enum() *UnionSupport {
	p := new(UnionSupport)
	*p = x
	return p
}

func (x UnionSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnionSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_User_proto_enumTypes[16].Descriptor()
}

func (UnionSupport) Type() protoreflect.EnumType {
	return &file_User_proto_enumTypes[16]
}

func (x UnionSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UnionSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UnionSupport(num)
	return nil
}

// Deprecated: Use UnionSupport.Descriptor instead.
func (UnionSupport) EnumDescriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{16}
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{0}
}

func (x *Property) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type UserProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*Property `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
}

func (x *UserProperties) Reset() {
	*x = UserProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProperties) ProtoMessage() {}

func (x *UserProperties) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProperties.ProtoReflect.Descriptor instead.
func (*UserProperties) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{1}
}

func (x *UserProperties) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type RpcEndpointInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`                         // example: Apache Drill Server, Apache Drill C++ client
	Version          *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`                   // example: 1.9.0
	MajorVersion     *uint32 `protobuf:"varint,3,opt,name=majorVersion" json:"majorVersion,omitempty"`        // example: 1
	MinorVersion     *uint32 `protobuf:"varint,4,opt,name=minorVersion" json:"minorVersion,omitempty"`        // example: 9
	PatchVersion     *uint32 `protobuf:"varint,5,opt,name=patchVersion" json:"patchVersion,omitempty"`        // example: 0
	Application      *string `protobuf:"bytes,6,opt,name=application" json:"application,omitempty"`           // example: Tableau 9.3
	BuildNumber      *uint32 `protobuf:"varint,7,opt,name=buildNumber" json:"buildNumber,omitempty"`          // example: 32
	VersionQualifier *string `protobuf:"bytes,8,opt,name=versionQualifier" json:"versionQualifier,omitempty"` // example: SNAPSHOT
}

func (x *RpcEndpointInfos) Reset() {
	*x = RpcEndpointInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcEndpointInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcEndpointInfos) ProtoMessage() {}

func (x *RpcEndpointInfos) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcEndpointInfos.ProtoReflect.Descriptor instead.
func (*RpcEndpointInfos) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{2}
}

func (x *RpcEndpointInfos) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RpcEndpointInfos) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *RpcEndpointInfos) GetMajorVersion() uint32 {
	if x != nil && x.MajorVersion != nil {
		return *x.MajorVersion
	}
	return 0
}

func (x *RpcEndpointInfos) GetMinorVersion() uint32 {
	if x != nil && x.MinorVersion != nil {
		return *x.MinorVersion
	}
	return 0
}

func (x *RpcEndpointInfos) GetPatchVersion() uint32 {
	if x != nil && x.PatchVersion != nil {
		return *x.PatchVersion
	}
	return 0
}

func (x *RpcEndpointInfos) GetApplication() string {
	if x != nil && x.Application != nil {
		return *x.Application
	}
	return ""
}

func (x *RpcEndpointInfos) GetBuildNumber() uint32 {
	if x != nil && x.BuildNumber != nil {
		return *x.BuildNumber
	}
	return 0
}

func (x *RpcEndpointInfos) GetVersionQualifier() string {
	if x != nil && x.VersionQualifier != nil {
		return *x.VersionQualifier
	}
	return ""
}

type UserToBitHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel             *shared.RpcChannel      `protobuf:"varint,1,opt,name=channel,enum=exec.shared.RpcChannel,def=2" json:"channel,omitempty"`
	SupportListening    *bool                   `protobuf:"varint,2,opt,name=support_listening,json=supportListening" json:"support_listening,omitempty"`
	RpcVersion          *int32                  `protobuf:"varint,3,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	Credentials         *shared.UserCredentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	Properties          *UserProperties         `protobuf:"bytes,5,opt,name=properties" json:"properties,omitempty"`
	SupportComplexTypes *bool                   `protobuf:"varint,6,opt,name=support_complex_types,json=supportComplexTypes,def=0" json:"support_complex_types,omitempty"`
	SupportTimeout      *bool                   `protobuf:"varint,7,opt,name=support_timeout,json=supportTimeout,def=0" json:"support_timeout,omitempty"`
	ClientInfos         *RpcEndpointInfos       `protobuf:"bytes,8,opt,name=client_infos,json=clientInfos" json:"client_infos,omitempty"`
	SaslSupport         *SaslSupport            `protobuf:"varint,9,opt,name=sasl_support,json=saslSupport,enum=exec.user.SaslSupport" json:"sasl_support,omitempty"`
}

// Default values for UserToBitHandshake fields.
const (
	Default_UserToBitHandshake_Channel             = shared.RpcChannel_USER
	Default_UserToBitHandshake_SupportComplexTypes = bool(false)
	Default_UserToBitHandshake_SupportTimeout      = bool(false)
)

func (x *UserToBitHandshake) Reset() {
	*x = UserToBitHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToBitHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToBitHandshake) ProtoMessage() {}

func (x *UserToBitHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToBitHandshake.ProtoReflect.Descriptor instead.
func (*UserToBitHandshake) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{3}
}

func (x *UserToBitHandshake) GetChannel() shared.RpcChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_UserToBitHandshake_Channel
}

func (x *UserToBitHandshake) GetSupportListening() bool {
	if x != nil && x.SupportListening != nil {
		return *x.SupportListening
	}
	return false
}

func (x *UserToBitHandshake) GetRpcVersion() int32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *UserToBitHandshake) GetCredentials() *shared.UserCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *UserToBitHandshake) GetProperties() *UserProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UserToBitHandshake) GetSupportComplexTypes() bool {
	if x != nil && x.SupportComplexTypes != nil {
		return *x.SupportComplexTypes
	}
	return Default_UserToBitHandshake_SupportComplexTypes
}

func (x *UserToBitHandshake) GetSupportTimeout() bool {
	if x != nil && x.SupportTimeout != nil {
		return *x.SupportTimeout
	}
	return Default_UserToBitHandshake_SupportTimeout
}

func (x *UserToBitHandshake) GetClientInfos() *RpcEndpointInfos {
	if x != nil {
		return x.ClientInfos
	}
	return nil
}

func (x *UserToBitHandshake) GetSaslSupport() SaslSupport {
	if x != nil && x.SaslSupport != nil {
		return *x.SaslSupport
	}
	return SaslSupport_UNKNOWN_SASL_SUPPORT
}

type RequestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId          *shared.QueryId `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	MaximumResponses *int32          `protobuf:"varint,2,opt,name=maximum_responses,json=maximumResponses" json:"maximum_responses,omitempty"`
}

func (x *RequestResults) Reset() {
	*x = RequestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResults) ProtoMessage() {}

func (x *RequestResults) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResults.ProtoReflect.Descriptor instead.
func (*RequestResults) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{4}
}

func (x *RequestResults) GetQueryId() *shared.QueryId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *RequestResults) GetMaximumResponses() int32 {
	if x != nil && x.MaximumResponses != nil {
		return *x.MaximumResponses
	}
	return 0
}

type GetQueryPlanFragments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *string           `protobuf:"bytes,1,req,name=query" json:"query,omitempty"`
	Type      *shared.QueryType `protobuf:"varint,2,opt,name=type,enum=exec.shared.QueryType" json:"type,omitempty"`
	SplitPlan *bool             `protobuf:"varint,3,opt,name=split_plan,json=splitPlan,def=0" json:"split_plan,omitempty"`
}

// Default values for GetQueryPlanFragments fields.
const (
	Default_GetQueryPlanFragments_SplitPlan = bool(false)
)

func (x *GetQueryPlanFragments) Reset() {
	*x = GetQueryPlanFragments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryPlanFragments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryPlanFragments) ProtoMessage() {}

func (x *GetQueryPlanFragments) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryPlanFragments.ProtoReflect.Descriptor instead.
func (*GetQueryPlanFragments) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{5}
}

func (x *GetQueryPlanFragments) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *GetQueryPlanFragments) GetType() shared.QueryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return shared.QueryType_SQL
}

func (x *GetQueryPlanFragments) GetSplitPlan() bool {
	if x != nil && x.SplitPlan != nil {
		return *x.SplitPlan
	}
	return Default_GetQueryPlanFragments_SplitPlan
}

type QueryPlanFragments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *shared.QueryResult_QueryState `protobuf:"varint,1,req,name=status,enum=exec.shared.QueryResult_QueryState" json:"status,omitempty"`
	QueryId   *shared.QueryId                `protobuf:"bytes,2,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Fragments []*control.PlanFragment        `protobuf:"bytes,3,rep,name=fragments" json:"fragments,omitempty"`
	Error     *shared.DrillPBError           `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (x *QueryPlanFragments) Reset() {
	*x = QueryPlanFragments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPlanFragments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlanFragments) ProtoMessage() {}

func (x *QueryPlanFragments) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlanFragments.ProtoReflect.Descriptor instead.
func (*QueryPlanFragments) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{6}
}

func (x *QueryPlanFragments) GetStatus() shared.QueryResult_QueryState {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return shared.QueryResult_STARTING
}

func (x *QueryPlanFragments) GetQueryId() *shared.QueryId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *QueryPlanFragments) GetFragments() []*control.PlanFragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *QueryPlanFragments) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

type BitToUserHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcVersion               *int32            `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	Status                   *HandshakeStatus  `protobuf:"varint,3,opt,name=status,enum=exec.user.HandshakeStatus" json:"status,omitempty"`
	ErrorId                  *string           `protobuf:"bytes,4,opt,name=errorId" json:"errorId,omitempty"`
	ErrorMessage             *string           `protobuf:"bytes,5,opt,name=errorMessage" json:"errorMessage,omitempty"`
	ServerInfos              *RpcEndpointInfos `protobuf:"bytes,6,opt,name=server_infos,json=serverInfos" json:"server_infos,omitempty"`
	AuthenticationMechanisms []string          `protobuf:"bytes,7,rep,name=authenticationMechanisms" json:"authenticationMechanisms,omitempty"`
	SupportedMethods         []RpcType         `protobuf:"varint,8,rep,name=supported_methods,json=supportedMethods,enum=exec.user.RpcType" json:"supported_methods,omitempty"`
	Encrypted                *bool             `protobuf:"varint,9,opt,name=encrypted" json:"encrypted,omitempty"`
	MaxWrappedSize           *int32            `protobuf:"varint,10,opt,name=maxWrappedSize" json:"maxWrappedSize,omitempty"`
}

func (x *BitToUserHandshake) Reset() {
	*x = BitToUserHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitToUserHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitToUserHandshake) ProtoMessage() {}

func (x *BitToUserHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitToUserHandshake.ProtoReflect.Descriptor instead.
func (*BitToUserHandshake) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{7}
}

func (x *BitToUserHandshake) GetRpcVersion() int32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *BitToUserHandshake) GetStatus() HandshakeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return HandshakeStatus_SUCCESS
}

func (x *BitToUserHandshake) GetErrorId() string {
	if x != nil && x.ErrorId != nil {
		return *x.ErrorId
	}
	return ""
}

func (x *BitToUserHandshake) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *BitToUserHandshake) GetServerInfos() *RpcEndpointInfos {
	if x != nil {
		return x.ServerInfos
	}
	return nil
}

func (x *BitToUserHandshake) GetAuthenticationMechanisms() []string {
	if x != nil {
		return x.AuthenticationMechanisms
	}
	return nil
}

func (x *BitToUserHandshake) GetSupportedMethods() []RpcType {
	if x != nil {
		return x.SupportedMethods
	}
	return nil
}

func (x *BitToUserHandshake) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

func (x *BitToUserHandshake) GetMaxWrappedSize() int32 {
	if x != nil && x.MaxWrappedSize != nil {
		return *x.MaxWrappedSize
	}
	return 0
}

//
// Simple filter which encapsulates the SQL LIKE ... ESCAPE function
type LikeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern *string `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"` // pattern to match
	Escape  *string `protobuf:"bytes,2,opt,name=escape" json:"escape,omitempty"`   // escape character (if any) present in the pattern
}

func (x *LikeFilter) Reset() {
	*x = LikeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeFilter) ProtoMessage() {}

func (x *LikeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeFilter.ProtoReflect.Descriptor instead.
func (*LikeFilter) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{8}
}

func (x *LikeFilter) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *LikeFilter) GetEscape() string {
	if x != nil && x.Escape != nil {
		return *x.Escape
	}
	return ""
}

//
// Request message for getting the metadata for catalogs satisfying the given optional filter.
type GetCatalogsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNameFilter *LikeFilter `protobuf:"bytes,1,opt,name=catalog_name_filter,json=catalogNameFilter" json:"catalog_name_filter,omitempty"`
}

func (x *GetCatalogsReq) Reset() {
	*x = GetCatalogsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCatalogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCatalogsReq) ProtoMessage() {}

func (x *GetCatalogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCatalogsReq.ProtoReflect.Descriptor instead.
func (*GetCatalogsReq) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{9}
}

func (x *GetCatalogsReq) GetCatalogNameFilter() *LikeFilter {
	if x != nil {
		return x.CatalogNameFilter
	}
	return nil
}

//
// Message encapsulating metadata for a Catalog.
type CatalogMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName *string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName" json:"catalog_name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Connect     *string `protobuf:"bytes,3,opt,name=connect" json:"connect,omitempty"`
}

func (x *CatalogMetadata) Reset() {
	*x = CatalogMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogMetadata) ProtoMessage() {}

func (x *CatalogMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogMetadata.ProtoReflect.Descriptor instead.
func (*CatalogMetadata) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{10}
}

func (x *CatalogMetadata) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *CatalogMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CatalogMetadata) GetConnect() string {
	if x != nil && x.Connect != nil {
		return *x.Connect
	}
	return ""
}

//
// Response message for GetCatalogReq.
type GetCatalogsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *RequestStatus       `protobuf:"varint,1,opt,name=status,enum=exec.user.RequestStatus" json:"status,omitempty"`
	Catalogs []*CatalogMetadata   `protobuf:"bytes,2,rep,name=catalogs" json:"catalogs,omitempty"`
	Error    *shared.DrillPBError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *GetCatalogsResp) Reset() {
	*x = GetCatalogsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCatalogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCatalogsResp) ProtoMessage() {}

func (x *GetCatalogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCatalogsResp.ProtoReflect.Descriptor instead.
func (*GetCatalogsResp) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{11}
}

func (x *GetCatalogsResp) GetStatus() RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RequestStatus_UNKNOWN_STATUS
}

func (x *GetCatalogsResp) GetCatalogs() []*CatalogMetadata {
	if x != nil {
		return x.Catalogs
	}
	return nil
}

func (x *GetCatalogsResp) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

//
// Request message for getting the metadata for schemas satisfying the given optional filters.
type GetSchemasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNameFilter *LikeFilter `protobuf:"bytes,1,opt,name=catalog_name_filter,json=catalogNameFilter" json:"catalog_name_filter,omitempty"`
	SchemaNameFilter  *LikeFilter `protobuf:"bytes,2,opt,name=schema_name_filter,json=schemaNameFilter" json:"schema_name_filter,omitempty"`
}

func (x *GetSchemasReq) Reset() {
	*x = GetSchemasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemasReq) ProtoMessage() {}

func (x *GetSchemasReq) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemasReq.ProtoReflect.Descriptor instead.
func (*GetSchemasReq) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{12}
}

func (x *GetSchemasReq) GetCatalogNameFilter() *LikeFilter {
	if x != nil {
		return x.CatalogNameFilter
	}
	return nil
}

func (x *GetSchemasReq) GetSchemaNameFilter() *LikeFilter {
	if x != nil {
		return x.SchemaNameFilter
	}
	return nil
}

//
// Message encapsulating metadata for a Schema.
type SchemaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName *string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName" json:"catalog_name,omitempty"`
	SchemaName  *string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	Owner       *string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Type        *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"` // Type. Ex. "file", "mongodb", "hive" etc.
	Mutable     *string `protobuf:"bytes,5,opt,name=mutable" json:"mutable,omitempty"`
}

func (x *SchemaMetadata) Reset() {
	*x = SchemaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMetadata) ProtoMessage() {}

func (x *SchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMetadata.ProtoReflect.Descriptor instead.
func (*SchemaMetadata) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{13}
}

func (x *SchemaMetadata) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *SchemaMetadata) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

func (x *SchemaMetadata) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *SchemaMetadata) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SchemaMetadata) GetMutable() string {
	if x != nil && x.Mutable != nil {
		return *x.Mutable
	}
	return ""
}

//
// Response message for GetSchemasReq.
type GetSchemasResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *RequestStatus       `protobuf:"varint,1,opt,name=status,enum=exec.user.RequestStatus" json:"status,omitempty"`
	Schemas []*SchemaMetadata    `protobuf:"bytes,2,rep,name=schemas" json:"schemas,omitempty"`
	Error   *shared.DrillPBError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *GetSchemasResp) Reset() {
	*x = GetSchemasResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemasResp) ProtoMessage() {}

func (x *GetSchemasResp) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemasResp.ProtoReflect.Descriptor instead.
func (*GetSchemasResp) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{14}
}

func (x *GetSchemasResp) GetStatus() RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RequestStatus_UNKNOWN_STATUS
}

func (x *GetSchemasResp) GetSchemas() []*SchemaMetadata {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *GetSchemasResp) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

//
// Request message for getting the metadata for tables satisfying the given optional filters.
type GetTablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNameFilter *LikeFilter `protobuf:"bytes,1,opt,name=catalog_name_filter,json=catalogNameFilter" json:"catalog_name_filter,omitempty"`
	SchemaNameFilter  *LikeFilter `protobuf:"bytes,2,opt,name=schema_name_filter,json=schemaNameFilter" json:"schema_name_filter,omitempty"`
	TableNameFilter   *LikeFilter `protobuf:"bytes,3,opt,name=table_name_filter,json=tableNameFilter" json:"table_name_filter,omitempty"`
	TableTypeFilter   []string    `protobuf:"bytes,4,rep,name=table_type_filter,json=tableTypeFilter" json:"table_type_filter,omitempty"`
}

func (x *GetTablesReq) Reset() {
	*x = GetTablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesReq) ProtoMessage() {}

func (x *GetTablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesReq.ProtoReflect.Descriptor instead.
func (*GetTablesReq) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{15}
}

func (x *GetTablesReq) GetCatalogNameFilter() *LikeFilter {
	if x != nil {
		return x.CatalogNameFilter
	}
	return nil
}

func (x *GetTablesReq) GetSchemaNameFilter() *LikeFilter {
	if x != nil {
		return x.SchemaNameFilter
	}
	return nil
}

func (x *GetTablesReq) GetTableNameFilter() *LikeFilter {
	if x != nil {
		return x.TableNameFilter
	}
	return nil
}

func (x *GetTablesReq) GetTableTypeFilter() []string {
	if x != nil {
		return x.TableTypeFilter
	}
	return nil
}

//
// Message encapsulating metadata for a Table.
type TableMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName *string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName" json:"catalog_name,omitempty"`
	SchemaName  *string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	TableName   *string `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Type        *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"` // Type. Ex. "TABLE", "VIEW" etc.
}

func (x *TableMetadata) Reset() {
	*x = TableMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMetadata) ProtoMessage() {}

func (x *TableMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMetadata.ProtoReflect.Descriptor instead.
func (*TableMetadata) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{16}
}

func (x *TableMetadata) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *TableMetadata) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

func (x *TableMetadata) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TableMetadata) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

//
// Response message for GetTablesReq.
type GetTablesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *RequestStatus       `protobuf:"varint,1,opt,name=status,enum=exec.user.RequestStatus" json:"status,omitempty"`
	Tables []*TableMetadata     `protobuf:"bytes,2,rep,name=tables" json:"tables,omitempty"`
	Error  *shared.DrillPBError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *GetTablesResp) Reset() {
	*x = GetTablesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTablesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesResp) ProtoMessage() {}

func (x *GetTablesResp) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesResp.ProtoReflect.Descriptor instead.
func (*GetTablesResp) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{17}
}

func (x *GetTablesResp) GetStatus() RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RequestStatus_UNKNOWN_STATUS
}

func (x *GetTablesResp) GetTables() []*TableMetadata {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetTablesResp) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

//
// Request message for getting the metadata for columns satisfying the given optional filters.
type GetColumnsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNameFilter *LikeFilter `protobuf:"bytes,1,opt,name=catalog_name_filter,json=catalogNameFilter" json:"catalog_name_filter,omitempty"`
	SchemaNameFilter  *LikeFilter `protobuf:"bytes,2,opt,name=schema_name_filter,json=schemaNameFilter" json:"schema_name_filter,omitempty"`
	TableNameFilter   *LikeFilter `protobuf:"bytes,3,opt,name=table_name_filter,json=tableNameFilter" json:"table_name_filter,omitempty"`
	ColumnNameFilter  *LikeFilter `protobuf:"bytes,4,opt,name=column_name_filter,json=columnNameFilter" json:"column_name_filter,omitempty"`
}

func (x *GetColumnsReq) Reset() {
	*x = GetColumnsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColumnsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColumnsReq) ProtoMessage() {}

func (x *GetColumnsReq) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColumnsReq.ProtoReflect.Descriptor instead.
func (*GetColumnsReq) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{18}
}

func (x *GetColumnsReq) GetCatalogNameFilter() *LikeFilter {
	if x != nil {
		return x.CatalogNameFilter
	}
	return nil
}

func (x *GetColumnsReq) GetSchemaNameFilter() *LikeFilter {
	if x != nil {
		return x.SchemaNameFilter
	}
	return nil
}

func (x *GetColumnsReq) GetTableNameFilter() *LikeFilter {
	if x != nil {
		return x.TableNameFilter
	}
	return nil
}

func (x *GetColumnsReq) GetColumnNameFilter() *LikeFilter {
	if x != nil {
		return x.ColumnNameFilter
	}
	return nil
}

//
// Message encapsulating metadata for a Column.
type ColumnMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName           *string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName" json:"catalog_name,omitempty"`
	SchemaName            *string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	TableName             *string `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnName            *string `protobuf:"bytes,4,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
	OrdinalPosition       *int32  `protobuf:"varint,5,opt,name=ordinal_position,json=ordinalPosition" json:"ordinal_position,omitempty"`
	DefaultValue          *string `protobuf:"bytes,6,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	IsNullable            *bool   `protobuf:"varint,7,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	DataType              *string `protobuf:"bytes,8,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	CharMaxLength         *int32  `protobuf:"varint,9,opt,name=char_max_length,json=charMaxLength" json:"char_max_length,omitempty"`
	CharOctetLength       *int32  `protobuf:"varint,10,opt,name=char_octet_length,json=charOctetLength" json:"char_octet_length,omitempty"`
	NumericPrecision      *int32  `protobuf:"varint,11,opt,name=numeric_precision,json=numericPrecision" json:"numeric_precision,omitempty"`
	NumericPrecisionRadix *int32  `protobuf:"varint,12,opt,name=numeric_precision_radix,json=numericPrecisionRadix" json:"numeric_precision_radix,omitempty"`
	NumericScale          *int32  `protobuf:"varint,13,opt,name=numeric_scale,json=numericScale" json:"numeric_scale,omitempty"`
	DateTimePrecision     *int32  `protobuf:"varint,14,opt,name=date_time_precision,json=dateTimePrecision" json:"date_time_precision,omitempty"`
	IntervalType          *string `protobuf:"bytes,15,opt,name=interval_type,json=intervalType" json:"interval_type,omitempty"`
	IntervalPrecision     *int32  `protobuf:"varint,16,opt,name=interval_precision,json=intervalPrecision" json:"interval_precision,omitempty"`
	ColumnSize            *int32  `protobuf:"varint,17,opt,name=column_size,json=columnSize" json:"column_size,omitempty"`
}

func (x *ColumnMetadata) Reset() {
	*x = ColumnMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetadata) ProtoMessage() {}

func (x *ColumnMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetadata.ProtoReflect.Descriptor instead.
func (*ColumnMetadata) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{19}
}

func (x *ColumnMetadata) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *ColumnMetadata) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

func (x *ColumnMetadata) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *ColumnMetadata) GetColumnName() string {
	if x != nil && x.ColumnName != nil {
		return *x.ColumnName
	}
	return ""
}

func (x *ColumnMetadata) GetOrdinalPosition() int32 {
	if x != nil && x.OrdinalPosition != nil {
		return *x.OrdinalPosition
	}
	return 0
}

func (x *ColumnMetadata) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *ColumnMetadata) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

func (x *ColumnMetadata) GetDataType() string {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return ""
}

func (x *ColumnMetadata) GetCharMaxLength() int32 {
	if x != nil && x.CharMaxLength != nil {
		return *x.CharMaxLength
	}
	return 0
}

func (x *ColumnMetadata) GetCharOctetLength() int32 {
	if x != nil && x.CharOctetLength != nil {
		return *x.CharOctetLength
	}
	return 0
}

func (x *ColumnMetadata) GetNumericPrecision() int32 {
	if x != nil && x.NumericPrecision != nil {
		return *x.NumericPrecision
	}
	return 0
}

func (x *ColumnMetadata) GetNumericPrecisionRadix() int32 {
	if x != nil && x.NumericPrecisionRadix != nil {
		return *x.NumericPrecisionRadix
	}
	return 0
}

func (x *ColumnMetadata) GetNumericScale() int32 {
	if x != nil && x.NumericScale != nil {
		return *x.NumericScale
	}
	return 0
}

func (x *ColumnMetadata) GetDateTimePrecision() int32 {
	if x != nil && x.DateTimePrecision != nil {
		return *x.DateTimePrecision
	}
	return 0
}

func (x *ColumnMetadata) GetIntervalType() string {
	if x != nil && x.IntervalType != nil {
		return *x.IntervalType
	}
	return ""
}

func (x *ColumnMetadata) GetIntervalPrecision() int32 {
	if x != nil && x.IntervalPrecision != nil {
		return *x.IntervalPrecision
	}
	return 0
}

func (x *ColumnMetadata) GetColumnSize() int32 {
	if x != nil && x.ColumnSize != nil {
		return *x.ColumnSize
	}
	return 0
}

//
// Response message for GetColumnsReq.
type GetColumnsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *RequestStatus       `protobuf:"varint,1,opt,name=status,enum=exec.user.RequestStatus" json:"status,omitempty"`
	Columns []*ColumnMetadata    `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Error   *shared.DrillPBError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *GetColumnsResp) Reset() {
	*x = GetColumnsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColumnsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColumnsResp) ProtoMessage() {}

func (x *GetColumnsResp) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColumnsResp.ProtoReflect.Descriptor instead.
func (*GetColumnsResp) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{20}
}

func (x *GetColumnsResp) GetStatus() RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RequestStatus_UNKNOWN_STATUS
}

func (x *GetColumnsResp) GetColumns() []*ColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *GetColumnsResp) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

//
// Request message to create a prepared statement. Currently prepared
// statement only accepts a SQL query. Query parameter support is not
// included in current implementation.
type CreatePreparedStatementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlQuery *string `protobuf:"bytes,1,opt,name=sql_query,json=sqlQuery" json:"sql_query,omitempty"`
}

func (x *CreatePreparedStatementReq) Reset() {
	*x = CreatePreparedStatementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreparedStatementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreparedStatementReq) ProtoMessage() {}

func (x *CreatePreparedStatementReq) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreparedStatementReq.ProtoReflect.Descriptor instead.
func (*CreatePreparedStatementReq) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{21}
}

func (x *CreatePreparedStatementReq) GetSqlQuery() string {
	if x != nil && x.SqlQuery != nil {
		return *x.SqlQuery
	}
	return ""
}

//
// Metadata of a column in query result set
type ResultColumnMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Designated column's catalog name. Empty string if not applicable.
	// Defaults to "DRILL" as drill has only one catalog.
	CatalogName *string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName" json:"catalog_name,omitempty"`
	//
	// Designated column's schema name. Not set if not applicable. Initial implementation
	// defaults to no value as we use LIMIT 0 queries to get the schema and schema info
	// is lost. If we derive the schema from plan, we may get the right value.
	SchemaName *string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	//
	// Designated column's table name. Not set if not applicable. Initial implementation
	// defaults to no value as we use LIMIT 0 queries to get the schema and table info
	// is lost. If we derive the schema from query plan, we may get the right value.
	TableName  *string `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnName *string `protobuf:"bytes,4,opt,name=column_name,json=columnName" json:"column_name,omitempty"` // column name
	//
	// Column label name for display or print purposes.
	// Ex. a column named "empName" might be labeled as "Employee Name".
	Label *string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	//
	// Data type in string format. Value is SQL standard type.
	DataType   *string `protobuf:"bytes,6,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	IsNullable *bool   `protobuf:"varint,7,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	//
	// For numeric data, this is the maximum precision.
	// For character data, this is the length in characters.
	// For datetime datatypes, this is the length in characters of the String representation
	//    (assuming the maximum allowed precision of the fractional seconds component).
	// For binary data, this is the length in bytes.
	// For all other types 0 is returned where the column size is not applicable.
	Precision *int32 `protobuf:"varint,8,opt,name=precision" json:"precision,omitempty"`
	//
	// Column's number of digits to right of the decimal point.
	// 0 is returned for types where the scale is not applicable
	Scale *int32 `protobuf:"varint,9,opt,name=scale" json:"scale,omitempty"`
	//
	// Indicates whether values in the designated column are signed numbers.
	Signed *bool `protobuf:"varint,10,opt,name=signed" json:"signed,omitempty"`
	//
	// Maximum number of characters required to display data from the column.
	DisplaySize *int32 `protobuf:"varint,11,opt,name=display_size,json=displaySize" json:"display_size,omitempty"`
	//
	// Is the column an aliased column. Initial implementation defaults to
	// true as we derive schema from LIMIT 0 query and not the query plan.
	IsAliased     *bool                `protobuf:"varint,12,opt,name=is_aliased,json=isAliased" json:"is_aliased,omitempty"`
	Searchability *ColumnSearchability `protobuf:"varint,13,opt,name=searchability,enum=exec.user.ColumnSearchability" json:"searchability,omitempty"`
	//
	// Defaults to READ_ONLY
	Updatability *ColumnUpdatability `protobuf:"varint,14,opt,name=updatability,enum=exec.user.ColumnUpdatability" json:"updatability,omitempty"`
	//
	// whether the designated column is automatically incremented.
	AutoIncrement *bool `protobuf:"varint,15,opt,name=auto_increment,json=autoIncrement" json:"auto_increment,omitempty"`
	//
	// Whether column's case matters for collations and comparisons. Defaults to true.
	CaseSensitivity *bool `protobuf:"varint,16,opt,name=case_sensitivity,json=caseSensitivity" json:"case_sensitivity,omitempty"`
	//
	// whether the column can be used in ORDER BY clause
	Sortable *bool `protobuf:"varint,17,opt,name=sortable" json:"sortable,omitempty"`
	//
	// A fully-qualified name of the Java class whose instances are created
	// if the method ResultSet.getObject is called to retrieve
	// a value from the column. Applicable only to JDBC clients.
	ClassName *string `protobuf:"bytes,18,opt,name=class_name,json=className" json:"class_name,omitempty"`
	//
	// Is the data type a currency type? For JDBC only.
	IsCurrency *bool `protobuf:"varint,20,opt,name=is_currency,json=isCurrency" json:"is_currency,omitempty"`
}

func (x *ResultColumnMetadata) Reset() {
	*x = ResultColumnMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultColumnMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultColumnMetadata) ProtoMessage() {}

func (x *ResultColumnMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultColumnMetadata.ProtoReflect.Descriptor instead.
func (*ResultColumnMetadata) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{22}
}

func (x *ResultColumnMetadata) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *ResultColumnMetadata) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

func (x *ResultColumnMetadata) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *ResultColumnMetadata) GetColumnName() string {
	if x != nil && x.ColumnName != nil {
		return *x.ColumnName
	}
	return ""
}

func (x *ResultColumnMetadata) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ResultColumnMetadata) GetDataType() string {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return ""
}

func (x *ResultColumnMetadata) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return false
}

func (x *ResultColumnMetadata) GetPrecision() int32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *ResultColumnMetadata) GetScale() int32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *ResultColumnMetadata) GetSigned() bool {
	if x != nil && x.Signed != nil {
		return *x.Signed
	}
	return false
}

func (x *ResultColumnMetadata) GetDisplaySize() int32 {
	if x != nil && x.DisplaySize != nil {
		return *x.DisplaySize
	}
	return 0
}

func (x *ResultColumnMetadata) GetIsAliased() bool {
	if x != nil && x.IsAliased != nil {
		return *x.IsAliased
	}
	return false
}

func (x *ResultColumnMetadata) GetSearchability() ColumnSearchability {
	if x != nil && x.Searchability != nil {
		return *x.Searchability
	}
	return ColumnSearchability_UNKNOWN_SEARCHABILITY
}

func (x *ResultColumnMetadata) GetUpdatability() ColumnUpdatability {
	if x != nil && x.Updatability != nil {
		return *x.Updatability
	}
	return ColumnUpdatability_UNKNOWN_UPDATABILITY
}

func (x *ResultColumnMetadata) GetAutoIncrement() bool {
	if x != nil && x.AutoIncrement != nil {
		return *x.AutoIncrement
	}
	return false
}

func (x *ResultColumnMetadata) GetCaseSensitivity() bool {
	if x != nil && x.CaseSensitivity != nil {
		return *x.CaseSensitivity
	}
	return false
}

func (x *ResultColumnMetadata) GetSortable() bool {
	if x != nil && x.Sortable != nil {
		return *x.Sortable
	}
	return false
}

func (x *ResultColumnMetadata) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *ResultColumnMetadata) GetIsCurrency() bool {
	if x != nil && x.IsCurrency != nil {
		return *x.IsCurrency
	}
	return false
}

//
// Server state of prepared statement. Contents are opaque to
// client. Client just need to submit this object in RunQuery to
// the prepared statement.
type PreparedStatementHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerInfo []byte `protobuf:"bytes,1,opt,name=server_info,json=serverInfo" json:"server_info,omitempty"`
}

func (x *PreparedStatementHandle) Reset() {
	*x = PreparedStatementHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreparedStatementHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreparedStatementHandle) ProtoMessage() {}

func (x *PreparedStatementHandle) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreparedStatementHandle.ProtoReflect.Descriptor instead.
func (*PreparedStatementHandle) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{23}
}

func (x *PreparedStatementHandle) GetServerInfo() []byte {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

//
// Prepared statement. It contains the query metadata and handle to prepared
// statement state on server.
type PreparedStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*ResultColumnMetadata `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	//
	// In order to execute the prepared statement,
	// clients need to submit this object in RunQuery message.
	ServerHandle *PreparedStatementHandle `protobuf:"bytes,2,opt,name=server_handle,json=serverHandle" json:"server_handle,omitempty"`
}

func (x *PreparedStatement) Reset() {
	*x = PreparedStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreparedStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreparedStatement) ProtoMessage() {}

func (x *PreparedStatement) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreparedStatement.ProtoReflect.Descriptor instead.
func (*PreparedStatement) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{24}
}

func (x *PreparedStatement) GetColumns() []*ResultColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PreparedStatement) GetServerHandle() *PreparedStatementHandle {
	if x != nil {
		return x.ServerHandle
	}
	return nil
}

//
// Response message for CreatePreparedStatementReq.
type CreatePreparedStatementResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *RequestStatus       `protobuf:"varint,1,opt,name=status,enum=exec.user.RequestStatus" json:"status,omitempty"`
	PreparedStatement *PreparedStatement   `protobuf:"bytes,2,opt,name=prepared_statement,json=preparedStatement" json:"prepared_statement,omitempty"`
	Error             *shared.DrillPBError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *CreatePreparedStatementResp) Reset() {
	*x = CreatePreparedStatementResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreparedStatementResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreparedStatementResp) ProtoMessage() {}

func (x *CreatePreparedStatementResp) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreparedStatementResp.ProtoReflect.Descriptor instead.
func (*CreatePreparedStatementResp) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{25}
}

func (x *CreatePreparedStatementResp) GetStatus() RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RequestStatus_UNKNOWN_STATUS
}

func (x *CreatePreparedStatementResp) GetPreparedStatement() *PreparedStatement {
	if x != nil {
		return x.PreparedStatement
	}
	return nil
}

func (x *CreatePreparedStatementResp) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

//
// Request message for getting server metadata
type GetServerMetaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServerMetaReq) Reset() {
	*x = GetServerMetaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMetaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMetaReq) ProtoMessage() {}

func (x *GetServerMetaReq) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMetaReq.ProtoReflect.Descriptor instead.
func (*GetServerMetaReq) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{26}
}

type ConvertSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *common.MinorType `protobuf:"varint,1,req,name=from,enum=common.MinorType" json:"from,omitempty"`
	To   *common.MinorType `protobuf:"varint,2,req,name=to,enum=common.MinorType" json:"to,omitempty"`
}

func (x *ConvertSupport) Reset() {
	*x = ConvertSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertSupport) ProtoMessage() {}

func (x *ConvertSupport) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertSupport.ProtoReflect.Descriptor instead.
func (*ConvertSupport) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{27}
}

func (x *ConvertSupport) GetFrom() common.MinorType {
	if x != nil && x.From != nil {
		return *x.From
	}
	return common.MinorType_LATE
}

func (x *ConvertSupport) GetTo() common.MinorType {
	if x != nil && x.To != nil {
		return *x.To
	}
	return common.MinorType_LATE
}

//
// Response message for GetServerMetaReq
type GetServerMetaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *RequestStatus       `protobuf:"varint,1,opt,name=status,enum=exec.user.RequestStatus" json:"status,omitempty"`
	ServerMeta *ServerMeta          `protobuf:"bytes,2,opt,name=server_meta,json=serverMeta" json:"server_meta,omitempty"`
	Error      *shared.DrillPBError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *GetServerMetaResp) Reset() {
	*x = GetServerMetaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerMetaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerMetaResp) ProtoMessage() {}

func (x *GetServerMetaResp) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerMetaResp.ProtoReflect.Descriptor instead.
func (*GetServerMetaResp) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{28}
}

func (x *GetServerMetaResp) GetStatus() RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RequestStatus_UNKNOWN_STATUS
}

func (x *GetServerMetaResp) GetServerMeta() *ServerMeta {
	if x != nil {
		return x.ServerMeta
	}
	return nil
}

func (x *GetServerMetaResp) GetError() *shared.DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ServerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if current user can use all tables returned by GetTables
	AllTablesSelectable *bool `protobuf:"varint,1,opt,name=all_tables_selectable,json=allTablesSelectable" json:"all_tables_selectable,omitempty"`
	// True if BLOB are included into the max row size
	BlobIncludedInMaxRowSize *bool `protobuf:"varint,2,opt,name=blob_included_in_max_row_size,json=blobIncludedInMaxRowSize" json:"blob_included_in_max_row_size,omitempty"`
	// True if catalog name is at the start of a fully qualified table
	CatalogAtStart *bool `protobuf:"varint,3,opt,name=catalog_at_start,json=catalogAtStart" json:"catalog_at_start,omitempty"`
	// The catalog separator
	CatalogSeparator *string `protobuf:"bytes,4,opt,name=catalog_separator,json=catalogSeparator" json:"catalog_separator,omitempty"`
	// The term used to designate catalogs
	CatalogTerm *string `protobuf:"bytes,5,opt,name=catalog_term,json=catalogTerm" json:"catalog_term,omitempty"`
	// COLLATE support
	CollateSupport []CollateSupport `protobuf:"varint,6,rep,name=collate_support,json=collateSupport,enum=exec.user.CollateSupport" json:"collate_support,omitempty"`
	// True if column aliasing is supported
	ColumnAliasingSupported *bool `protobuf:"varint,7,opt,name=column_aliasing_supported,json=columnAliasingSupported" json:"column_aliasing_supported,omitempty"`
	// CONVERT support
	ConvertSupport []*ConvertSupport `protobuf:"bytes,8,rep,name=convert_support,json=convertSupport" json:"convert_support,omitempty"`
	// Correlation names support
	CorrelationNamesSupport *CorrelationNamesSupport `protobuf:"varint,9,opt,name=correlation_names_support,json=correlationNamesSupport,enum=exec.user.CorrelationNamesSupport" json:"correlation_names_support,omitempty"`
	// Supported ODBC/JDBC Date Time scalar functions
	DateTimeFunctions []string `protobuf:"bytes,10,rep,name=date_time_functions,json=dateTimeFunctions" json:"date_time_functions,omitempty"`
	// Supported Date Time literals
	DateTimeLiteralsSupport []DateTimeLiteralsSupport `protobuf:"varint,11,rep,name=date_time_literals_support,json=dateTimeLiteralsSupport,enum=exec.user.DateTimeLiteralsSupport" json:"date_time_literals_support,omitempty"`
	// Group By support
	GroupBySupport *GroupBySupport `protobuf:"varint,12,opt,name=group_by_support,json=groupBySupport,enum=exec.user.GroupBySupport" json:"group_by_support,omitempty"`
	// Unquoted Identifier casing
	IdentifierCasing *IdentifierCasing `protobuf:"varint,13,opt,name=identifier_casing,json=identifierCasing,enum=exec.user.IdentifierCasing" json:"identifier_casing,omitempty"`
	// Quote string for identifiers
	IdentifierQuoteString *string `protobuf:"bytes,14,opt,name=identifier_quote_string,json=identifierQuoteString" json:"identifier_quote_string,omitempty"`
	// True if LIKE supports an ESCAPE clause
	LikeEscapeClauseSupported *bool `protobuf:"varint,15,opt,name=like_escape_clause_supported,json=likeEscapeClauseSupported" json:"like_escape_clause_supported,omitempty"`
	// Maximum number of hexa characters for binary literals (0 if unlimited or unknown)
	MaxBinaryLiteralLength *uint32 `protobuf:"varint,16,opt,name=max_binary_literal_length,json=maxBinaryLiteralLength" json:"max_binary_literal_length,omitempty"`
	// Maximum length of catalog names (0 if unlimited or unknown)
	MaxCatalogNameLength *uint32 `protobuf:"varint,17,opt,name=max_catalog_name_length,json=maxCatalogNameLength" json:"max_catalog_name_length,omitempty"`
	// Maximum number of characters for string literals (0 if unlimited or unknown)
	MaxCharLiteralLength *uint32 `protobuf:"varint,18,opt,name=max_char_literal_length,json=maxCharLiteralLength" json:"max_char_literal_length,omitempty"`
	// Maximum length of column names (0 if unlimited or unknown)
	MaxColumnNameLength *uint32 `protobuf:"varint,19,opt,name=max_column_name_length,json=maxColumnNameLength" json:"max_column_name_length,omitempty"`
	// Maximum number of columns in GROUP BY expressions (0 if unlimited or unknown)
	MaxColumnsInGroupBy *uint32 `protobuf:"varint,20,opt,name=max_columns_in_group_by,json=maxColumnsInGroupBy" json:"max_columns_in_group_by,omitempty"`
	// Maximum number of columns in ORDER BY expressions (0 if unlimited or unknown)
	MaxColumnsInOrderBy *uint32 `protobuf:"varint,21,opt,name=max_columns_in_order_by,json=maxColumnsInOrderBy" json:"max_columns_in_order_by,omitempty"`
	// Maximum number of columns in SELECT expressions (0 if unlimited or unknown)
	MaxColumnsInSelect *uint32 `protobuf:"varint,22,opt,name=max_columns_in_select,json=maxColumnsInSelect" json:"max_columns_in_select,omitempty"`
	// Maximum length of cursor names (0 if unlimited or unknown)
	MaxCursorNameLength *uint32 `protobuf:"varint,23,opt,name=max_cursor_name_length,json=maxCursorNameLength" json:"max_cursor_name_length,omitempty"`
	// Maximum logical size for LOB types (0 if unlimited or unknown)
	MaxLogicalLobSize *uint32 `protobuf:"varint,24,opt,name=max_logical_lob_size,json=maxLogicalLobSize" json:"max_logical_lob_size,omitempty"`
	// Maximum number of bytes for a single row (0 if unlimited or unknown)
	MaxRowSize *uint32 `protobuf:"varint,25,opt,name=max_row_size,json=maxRowSize" json:"max_row_size,omitempty"`
	// Maximum length of schema names (0 if unlimited or unknown)
	MaxSchemaNameLength *uint32 `protobuf:"varint,26,opt,name=max_schema_name_length,json=maxSchemaNameLength" json:"max_schema_name_length,omitempty"`
	// Maximum length for statements (0 if unlimited or unknown)
	MaxStatementLength *uint32 `protobuf:"varint,27,opt,name=max_statement_length,json=maxStatementLength" json:"max_statement_length,omitempty"`
	// Maximum number of statements (0 if unlimited or unknown)
	MaxStatements *uint32 `protobuf:"varint,28,opt,name=max_statements,json=maxStatements" json:"max_statements,omitempty"`
	// Maximum length of table names (0 if unlimited or unknown)
	MaxTableNameLength *uint32 `protobuf:"varint,29,opt,name=max_table_name_length,json=maxTableNameLength" json:"max_table_name_length,omitempty"`
	// Maximum number of tables in a SELECT expression (0 if unlimited or unknown)
	MaxTablesInSelect *uint32 `protobuf:"varint,30,opt,name=max_tables_in_select,json=maxTablesInSelect" json:"max_tables_in_select,omitempty"`
	// Maximum length of user names (0 if unlimited or unknown)
	MaxUserNameLength *uint32 `protobuf:"varint,31,opt,name=max_user_name_length,json=maxUserNameLength" json:"max_user_name_length,omitempty"`
	// How NULL are sorted
	NullCollation *NullCollation `protobuf:"varint,32,opt,name=null_collation,json=nullCollation,enum=exec.user.NullCollation" json:"null_collation,omitempty"`
	// True if NULL + non NULL is NULL
	NullPlusNonNullEqualsNull *bool `protobuf:"varint,33,opt,name=null_plus_non_null_equals_null,json=nullPlusNonNullEqualsNull" json:"null_plus_non_null_equals_null,omitempty"`
	// Supported ODBC/JDBC numeric scalar functions
	NumericFunctions []string `protobuf:"bytes,34,rep,name=numeric_functions,json=numericFunctions" json:"numeric_functions,omitempty"`
	// Outer join suport
	OrderBySupport []OrderBySupport `protobuf:"varint,35,rep,name=order_by_support,json=orderBySupport,enum=exec.user.OrderBySupport" json:"order_by_support,omitempty"`
	// Outer join suport
	OuterJoinSupport []OuterJoinSupport `protobuf:"varint,36,rep,name=outer_join_support,json=outerJoinSupport,enum=exec.user.OuterJoinSupport" json:"outer_join_support,omitempty"`
	// Quoted identifier casing
	QuotedIdentifierCasing *IdentifierCasing `protobuf:"varint,37,opt,name=quoted_identifier_casing,json=quotedIdentifierCasing,enum=exec.user.IdentifierCasing" json:"quoted_identifier_casing,omitempty"`
	// True if connection access is read only
	ReadOnly *bool `protobuf:"varint,38,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	// The term used to designate a schema
	SchemaTerm *string `protobuf:"bytes,39,opt,name=schema_term,json=schemaTerm" json:"schema_term,omitempty"`
	// Characters used for escaping (empty if not suported)
	SearchEscapeString *string `protobuf:"bytes,40,opt,name=search_escape_string,json=searchEscapeString" json:"search_escape_string,omitempty"`
	// True if SELECT FOR UPDATE is supported
	SelectForUpdateSupported *bool `protobuf:"varint,41,opt,name=select_for_update_supported,json=selectForUpdateSupported" json:"select_for_update_supported,omitempty"`
	// List of extra characters that can be used in identifier names
	SpecialCharacters *string `protobuf:"bytes,42,opt,name=special_characters,json=specialCharacters" json:"special_characters,omitempty"`
	// list of SQL keywords
	SqlKeywords []string `protobuf:"bytes,43,rep,name=sql_keywords,json=sqlKeywords" json:"sql_keywords,omitempty"`
	// Supported ODBC/JDBC string scalar functions
	StringFunctions []string `protobuf:"bytes,44,rep,name=string_functions,json=stringFunctions" json:"string_functions,omitempty"`
	// Subquery support
	SubquerySupport []SubQuerySupport `protobuf:"varint,45,rep,name=subquery_support,json=subquerySupport,enum=exec.user.SubQuerySupport" json:"subquery_support,omitempty"`
	// Supported ODBC/JDBC systen scalar functions
	SystemFunctions []string `protobuf:"bytes,46,rep,name=system_functions,json=systemFunctions" json:"system_functions,omitempty"`
	// The term used to designate a table
	TableTerm *string `protobuf:"bytes,47,opt,name=table_term,json=tableTerm" json:"table_term,omitempty"`
	// True if transaction is supported
	TransactionSupported *bool `protobuf:"varint,48,opt,name=transaction_supported,json=transactionSupported" json:"transaction_supported,omitempty"`
	// UNION support
	UnionSupport []UnionSupport `protobuf:"varint,49,rep,name=union_support,json=unionSupport,enum=exec.user.UnionSupport" json:"union_support,omitempty"`
	// current schema
	CurrentSchema *string `protobuf:"bytes,50,opt,name=current_schema,json=currentSchema" json:"current_schema,omitempty"`
}

func (x *ServerMeta) Reset() {
	*x = ServerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta) ProtoMessage() {}

func (x *ServerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta.ProtoReflect.Descriptor instead.
func (*ServerMeta) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{29}
}

func (x *ServerMeta) GetAllTablesSelectable() bool {
	if x != nil && x.AllTablesSelectable != nil {
		return *x.AllTablesSelectable
	}
	return false
}

func (x *ServerMeta) GetBlobIncludedInMaxRowSize() bool {
	if x != nil && x.BlobIncludedInMaxRowSize != nil {
		return *x.BlobIncludedInMaxRowSize
	}
	return false
}

func (x *ServerMeta) GetCatalogAtStart() bool {
	if x != nil && x.CatalogAtStart != nil {
		return *x.CatalogAtStart
	}
	return false
}

func (x *ServerMeta) GetCatalogSeparator() string {
	if x != nil && x.CatalogSeparator != nil {
		return *x.CatalogSeparator
	}
	return ""
}

func (x *ServerMeta) GetCatalogTerm() string {
	if x != nil && x.CatalogTerm != nil {
		return *x.CatalogTerm
	}
	return ""
}

func (x *ServerMeta) GetCollateSupport() []CollateSupport {
	if x != nil {
		return x.CollateSupport
	}
	return nil
}

func (x *ServerMeta) GetColumnAliasingSupported() bool {
	if x != nil && x.ColumnAliasingSupported != nil {
		return *x.ColumnAliasingSupported
	}
	return false
}

func (x *ServerMeta) GetConvertSupport() []*ConvertSupport {
	if x != nil {
		return x.ConvertSupport
	}
	return nil
}

func (x *ServerMeta) GetCorrelationNamesSupport() CorrelationNamesSupport {
	if x != nil && x.CorrelationNamesSupport != nil {
		return *x.CorrelationNamesSupport
	}
	return CorrelationNamesSupport_CN_NONE
}

func (x *ServerMeta) GetDateTimeFunctions() []string {
	if x != nil {
		return x.DateTimeFunctions
	}
	return nil
}

func (x *ServerMeta) GetDateTimeLiteralsSupport() []DateTimeLiteralsSupport {
	if x != nil {
		return x.DateTimeLiteralsSupport
	}
	return nil
}

func (x *ServerMeta) GetGroupBySupport() GroupBySupport {
	if x != nil && x.GroupBySupport != nil {
		return *x.GroupBySupport
	}
	return GroupBySupport_GB_NONE
}

func (x *ServerMeta) GetIdentifierCasing() IdentifierCasing {
	if x != nil && x.IdentifierCasing != nil {
		return *x.IdentifierCasing
	}
	return IdentifierCasing_IC_UNKNOWN
}

func (x *ServerMeta) GetIdentifierQuoteString() string {
	if x != nil && x.IdentifierQuoteString != nil {
		return *x.IdentifierQuoteString
	}
	return ""
}

func (x *ServerMeta) GetLikeEscapeClauseSupported() bool {
	if x != nil && x.LikeEscapeClauseSupported != nil {
		return *x.LikeEscapeClauseSupported
	}
	return false
}

func (x *ServerMeta) GetMaxBinaryLiteralLength() uint32 {
	if x != nil && x.MaxBinaryLiteralLength != nil {
		return *x.MaxBinaryLiteralLength
	}
	return 0
}

func (x *ServerMeta) GetMaxCatalogNameLength() uint32 {
	if x != nil && x.MaxCatalogNameLength != nil {
		return *x.MaxCatalogNameLength
	}
	return 0
}

func (x *ServerMeta) GetMaxCharLiteralLength() uint32 {
	if x != nil && x.MaxCharLiteralLength != nil {
		return *x.MaxCharLiteralLength
	}
	return 0
}

func (x *ServerMeta) GetMaxColumnNameLength() uint32 {
	if x != nil && x.MaxColumnNameLength != nil {
		return *x.MaxColumnNameLength
	}
	return 0
}

func (x *ServerMeta) GetMaxColumnsInGroupBy() uint32 {
	if x != nil && x.MaxColumnsInGroupBy != nil {
		return *x.MaxColumnsInGroupBy
	}
	return 0
}

func (x *ServerMeta) GetMaxColumnsInOrderBy() uint32 {
	if x != nil && x.MaxColumnsInOrderBy != nil {
		return *x.MaxColumnsInOrderBy
	}
	return 0
}

func (x *ServerMeta) GetMaxColumnsInSelect() uint32 {
	if x != nil && x.MaxColumnsInSelect != nil {
		return *x.MaxColumnsInSelect
	}
	return 0
}

func (x *ServerMeta) GetMaxCursorNameLength() uint32 {
	if x != nil && x.MaxCursorNameLength != nil {
		return *x.MaxCursorNameLength
	}
	return 0
}

func (x *ServerMeta) GetMaxLogicalLobSize() uint32 {
	if x != nil && x.MaxLogicalLobSize != nil {
		return *x.MaxLogicalLobSize
	}
	return 0
}

func (x *ServerMeta) GetMaxRowSize() uint32 {
	if x != nil && x.MaxRowSize != nil {
		return *x.MaxRowSize
	}
	return 0
}

func (x *ServerMeta) GetMaxSchemaNameLength() uint32 {
	if x != nil && x.MaxSchemaNameLength != nil {
		return *x.MaxSchemaNameLength
	}
	return 0
}

func (x *ServerMeta) GetMaxStatementLength() uint32 {
	if x != nil && x.MaxStatementLength != nil {
		return *x.MaxStatementLength
	}
	return 0
}

func (x *ServerMeta) GetMaxStatements() uint32 {
	if x != nil && x.MaxStatements != nil {
		return *x.MaxStatements
	}
	return 0
}

func (x *ServerMeta) GetMaxTableNameLength() uint32 {
	if x != nil && x.MaxTableNameLength != nil {
		return *x.MaxTableNameLength
	}
	return 0
}

func (x *ServerMeta) GetMaxTablesInSelect() uint32 {
	if x != nil && x.MaxTablesInSelect != nil {
		return *x.MaxTablesInSelect
	}
	return 0
}

func (x *ServerMeta) GetMaxUserNameLength() uint32 {
	if x != nil && x.MaxUserNameLength != nil {
		return *x.MaxUserNameLength
	}
	return 0
}

func (x *ServerMeta) GetNullCollation() NullCollation {
	if x != nil && x.NullCollation != nil {
		return *x.NullCollation
	}
	return NullCollation_NC_UNKNOWN
}

func (x *ServerMeta) GetNullPlusNonNullEqualsNull() bool {
	if x != nil && x.NullPlusNonNullEqualsNull != nil {
		return *x.NullPlusNonNullEqualsNull
	}
	return false
}

func (x *ServerMeta) GetNumericFunctions() []string {
	if x != nil {
		return x.NumericFunctions
	}
	return nil
}

func (x *ServerMeta) GetOrderBySupport() []OrderBySupport {
	if x != nil {
		return x.OrderBySupport
	}
	return nil
}

func (x *ServerMeta) GetOuterJoinSupport() []OuterJoinSupport {
	if x != nil {
		return x.OuterJoinSupport
	}
	return nil
}

func (x *ServerMeta) GetQuotedIdentifierCasing() IdentifierCasing {
	if x != nil && x.QuotedIdentifierCasing != nil {
		return *x.QuotedIdentifierCasing
	}
	return IdentifierCasing_IC_UNKNOWN
}

func (x *ServerMeta) GetReadOnly() bool {
	if x != nil && x.ReadOnly != nil {
		return *x.ReadOnly
	}
	return false
}

func (x *ServerMeta) GetSchemaTerm() string {
	if x != nil && x.SchemaTerm != nil {
		return *x.SchemaTerm
	}
	return ""
}

func (x *ServerMeta) GetSearchEscapeString() string {
	if x != nil && x.SearchEscapeString != nil {
		return *x.SearchEscapeString
	}
	return ""
}

func (x *ServerMeta) GetSelectForUpdateSupported() bool {
	if x != nil && x.SelectForUpdateSupported != nil {
		return *x.SelectForUpdateSupported
	}
	return false
}

func (x *ServerMeta) GetSpecialCharacters() string {
	if x != nil && x.SpecialCharacters != nil {
		return *x.SpecialCharacters
	}
	return ""
}

func (x *ServerMeta) GetSqlKeywords() []string {
	if x != nil {
		return x.SqlKeywords
	}
	return nil
}

func (x *ServerMeta) GetStringFunctions() []string {
	if x != nil {
		return x.StringFunctions
	}
	return nil
}

func (x *ServerMeta) GetSubquerySupport() []SubQuerySupport {
	if x != nil {
		return x.SubquerySupport
	}
	return nil
}

func (x *ServerMeta) GetSystemFunctions() []string {
	if x != nil {
		return x.SystemFunctions
	}
	return nil
}

func (x *ServerMeta) GetTableTerm() string {
	if x != nil && x.TableTerm != nil {
		return *x.TableTerm
	}
	return ""
}

func (x *ServerMeta) GetTransactionSupported() bool {
	if x != nil && x.TransactionSupported != nil {
		return *x.TransactionSupported
	}
	return false
}

func (x *ServerMeta) GetUnionSupport() []UnionSupport {
	if x != nil {
		return x.UnionSupport
	}
	return nil
}

func (x *ServerMeta) GetCurrentSchema() string {
	if x != nil && x.CurrentSchema != nil {
		return *x.CurrentSchema
	}
	return ""
}

//
// Request message for running a query.
type RunQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultsMode *QueryResultsMode `protobuf:"varint,1,opt,name=results_mode,json=resultsMode,enum=exec.user.QueryResultsMode" json:"results_mode,omitempty"`
	Type        *shared.QueryType `protobuf:"varint,2,opt,name=type,enum=exec.shared.QueryType" json:"type,omitempty"`
	//
	// Input for query type LOGICAL, PHYSICAL or SQL.
	Plan *string `protobuf:"bytes,3,opt,name=plan" json:"plan,omitempty"`
	//
	// Input for query type EXECUTION. Input is a set of executable fragments.
	Fragments []*control.PlanFragment `protobuf:"bytes,4,rep,name=fragments" json:"fragments,omitempty"`
	//
	// Input for query type PREPARED_STATEMENT. Input is a prepared statement handle
	// to state on server side which is returned in response to CreatePreparedStatementReq.
	PreparedStatementHandle *PreparedStatementHandle `protobuf:"bytes,5,opt,name=prepared_statement_handle,json=preparedStatementHandle" json:"prepared_statement_handle,omitempty"`
	//
	// Input for indicating the limit on a query's result set.
	AutolimitRowcount *int32 `protobuf:"varint,6,opt,name=autolimit_rowcount,json=autolimitRowcount" json:"autolimit_rowcount,omitempty"`
}

func (x *RunQuery) Reset() {
	*x = RunQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_User_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQuery) ProtoMessage() {}

func (x *RunQuery) ProtoReflect() protoreflect.Message {
	mi := &file_User_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQuery.ProtoReflect.Descriptor instead.
func (*RunQuery) Descriptor() ([]byte, []int) {
	return file_User_proto_rawDescGZIP(), []int{30}
}

func (x *RunQuery) GetResultsMode() QueryResultsMode {
	if x != nil && x.ResultsMode != nil {
		return *x.ResultsMode
	}
	return QueryResultsMode_STREAM_FULL
}

func (x *RunQuery) GetType() shared.QueryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return shared.QueryType_SQL
}

func (x *RunQuery) GetPlan() string {
	if x != nil && x.Plan != nil {
		return *x.Plan
	}
	return ""
}

func (x *RunQuery) GetFragments() []*control.PlanFragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *RunQuery) GetPreparedStatementHandle() *PreparedStatementHandle {
	if x != nil {
		return x.PreparedStatementHandle
	}
	return nil
}

func (x *RunQuery) GetAutolimitRowcount() int32 {
	if x != nil && x.AutolimitRowcount != nil {
		return *x.AutolimitRowcount
	}
	return 0
}

var File_User_proto protoreflect.FileDescriptor

var file_User_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44,
	0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x42, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x42, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x32, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x9c, 0x02,
	0x0a, 0x10, 0x52, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xfc, 0x03, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x42, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x70, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x39, 0x0a, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b,
	0x73, 0x61, 0x73, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xf1, 0x01, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69,
	0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xaa, 0x03, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x70,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x70, 0x63,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x70,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a,
	0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x22, 0x57, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x45, 0x0a, 0x13, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x13, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89, 0x02, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x13,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa3, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x13, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa5, 0x05,
	0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68,
	0x61, 0x72, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69,
	0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x39, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xb3, 0x05, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x41, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x3a, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x97, 0x01,
	0x0a, 0x11, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x22, 0x5a, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xcf, 0x15, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x19, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x17, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x17, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x48, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6c, 0x69, 0x6b, 0x65, 0x45, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c,
	0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0e, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e,
	0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1e,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x75, 0x6c, 0x6c, 0x50, 0x6c, 0x75, 0x73, 0x4e, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x2b, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x49, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x18,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x61, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x45, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xd7, 0x02, 0x0a, 0x08, 0x52,
	0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x17, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x6f, 0x77, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xd0, 0x03, 0x0a, 0x07, 0x52, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4f, 0x4f, 0x44,
	0x42, 0x59, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x55, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x53, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x53, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x53, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x53, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x53, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x53, 0x10,
	0x13, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x14, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x18, 0x2a, 0x48, 0x0a, 0x0b, 0x53, 0x61, 0x73, 0x6c, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x10,
	0x02, 0x2a, 0x23, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x44, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x2a,
	0x59, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x48, 0x41, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x12, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x52, 0x49,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x53, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x17, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4e,
	0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x2a, 0xb9, 0x03, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x59, 0x45,
	0x41, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x55, 0x52,
	0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10,
	0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x0d,
	0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x0e,
	0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x0f,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x10, 0x10, 0x2a, 0x59, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x42, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x42, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x42, 0x5f, 0x42, 0x45, 0x59, 0x4f,
	0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x42, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x78, 0x0a,
	0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x4c,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x53, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x43, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f,
	0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x58, 0x0a, 0x0d, 0x4e, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x43, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x43, 0x5f, 0x41,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x43, 0x5f,
	0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x43, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x43, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x04, 0x2a, 0x45, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x42, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x5f, 0x45, 0x58, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x10, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x4a, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x4a, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4a,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4a, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4a, 0x5f, 0x4e, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4a, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4a, 0x5f, 0x49,
	0x4e, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x4a, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x53, 0x10,
	0x07, 0x2a, 0x84, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x51, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x51, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x51, 0x5f, 0x49,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x51, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x51, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x51, 0x5f, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x3b, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x5f, 0x55, 0x4e, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0x67, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x48, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a,
	0x65, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x64, 0x72, 0x69, 0x6c,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72,
}

var (
	file_User_proto_rawDescOnce sync.Once
	file_User_proto_rawDescData = file_User_proto_rawDesc
)

func file_User_proto_rawDescGZIP() []byte {
	file_User_proto_rawDescOnce.Do(func() {
		file_User_proto_rawDescData = protoimpl.X.CompressGZIP(file_User_proto_rawDescData)
	})
	return file_User_proto_rawDescData
}

var file_User_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_User_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_User_proto_goTypes = []interface{}{
	(RpcType)(0),                        // 0: exec.user.RpcType
	(SaslSupport)(0),                    // 1: exec.user.SaslSupport
	(QueryResultsMode)(0),               // 2: exec.user.QueryResultsMode
	(HandshakeStatus)(0),                // 3: exec.user.HandshakeStatus
	(RequestStatus)(0),                  // 4: exec.user.RequestStatus
	(ColumnSearchability)(0),            // 5: exec.user.ColumnSearchability
	(ColumnUpdatability)(0),             // 6: exec.user.ColumnUpdatability
	(CollateSupport)(0),                 // 7: exec.user.CollateSupport
	(CorrelationNamesSupport)(0),        // 8: exec.user.CorrelationNamesSupport
	(DateTimeLiteralsSupport)(0),        // 9: exec.user.DateTimeLiteralsSupport
	(GroupBySupport)(0),                 // 10: exec.user.GroupBySupport
	(IdentifierCasing)(0),               // 11: exec.user.IdentifierCasing
	(NullCollation)(0),                  // 12: exec.user.NullCollation
	(OrderBySupport)(0),                 // 13: exec.user.OrderBySupport
	(OuterJoinSupport)(0),               // 14: exec.user.OuterJoinSupport
	(SubQuerySupport)(0),                // 15: exec.user.SubQuerySupport
	(UnionSupport)(0),                   // 16: exec.user.UnionSupport
	(*Property)(nil),                    // 17: exec.user.Property
	(*UserProperties)(nil),              // 18: exec.user.UserProperties
	(*RpcEndpointInfos)(nil),            // 19: exec.user.RpcEndpointInfos
	(*UserToBitHandshake)(nil),          // 20: exec.user.UserToBitHandshake
	(*RequestResults)(nil),              // 21: exec.user.RequestResults
	(*GetQueryPlanFragments)(nil),       // 22: exec.user.GetQueryPlanFragments
	(*QueryPlanFragments)(nil),          // 23: exec.user.QueryPlanFragments
	(*BitToUserHandshake)(nil),          // 24: exec.user.BitToUserHandshake
	(*LikeFilter)(nil),                  // 25: exec.user.LikeFilter
	(*GetCatalogsReq)(nil),              // 26: exec.user.GetCatalogsReq
	(*CatalogMetadata)(nil),             // 27: exec.user.CatalogMetadata
	(*GetCatalogsResp)(nil),             // 28: exec.user.GetCatalogsResp
	(*GetSchemasReq)(nil),               // 29: exec.user.GetSchemasReq
	(*SchemaMetadata)(nil),              // 30: exec.user.SchemaMetadata
	(*GetSchemasResp)(nil),              // 31: exec.user.GetSchemasResp
	(*GetTablesReq)(nil),                // 32: exec.user.GetTablesReq
	(*TableMetadata)(nil),               // 33: exec.user.TableMetadata
	(*GetTablesResp)(nil),               // 34: exec.user.GetTablesResp
	(*GetColumnsReq)(nil),               // 35: exec.user.GetColumnsReq
	(*ColumnMetadata)(nil),              // 36: exec.user.ColumnMetadata
	(*GetColumnsResp)(nil),              // 37: exec.user.GetColumnsResp
	(*CreatePreparedStatementReq)(nil),  // 38: exec.user.CreatePreparedStatementReq
	(*ResultColumnMetadata)(nil),        // 39: exec.user.ResultColumnMetadata
	(*PreparedStatementHandle)(nil),     // 40: exec.user.PreparedStatementHandle
	(*PreparedStatement)(nil),           // 41: exec.user.PreparedStatement
	(*CreatePreparedStatementResp)(nil), // 42: exec.user.CreatePreparedStatementResp
	(*GetServerMetaReq)(nil),            // 43: exec.user.GetServerMetaReq
	(*ConvertSupport)(nil),              // 44: exec.user.ConvertSupport
	(*GetServerMetaResp)(nil),           // 45: exec.user.GetServerMetaResp
	(*ServerMeta)(nil),                  // 46: exec.user.ServerMeta
	(*RunQuery)(nil),                    // 47: exec.user.RunQuery
	(shared.RpcChannel)(0),              // 48: exec.shared.RpcChannel
	(*shared.UserCredentials)(nil),      // 49: exec.shared.UserCredentials
	(*shared.QueryId)(nil),              // 50: exec.shared.QueryId
	(shared.QueryType)(0),               // 51: exec.shared.QueryType
	(shared.QueryResult_QueryState)(0),  // 52: exec.shared.QueryResult.QueryState
	(*control.PlanFragment)(nil),        // 53: exec.bit.control.PlanFragment
	(*shared.DrillPBError)(nil),         // 54: exec.shared.DrillPBError
	(common.MinorType)(0),               // 55: common.MinorType
}
var file_User_proto_depIdxs = []int32{
	17, // 0: exec.user.UserProperties.properties:type_name -> exec.user.Property
	48, // 1: exec.user.UserToBitHandshake.channel:type_name -> exec.shared.RpcChannel
	49, // 2: exec.user.UserToBitHandshake.credentials:type_name -> exec.shared.UserCredentials
	18, // 3: exec.user.UserToBitHandshake.properties:type_name -> exec.user.UserProperties
	19, // 4: exec.user.UserToBitHandshake.client_infos:type_name -> exec.user.RpcEndpointInfos
	1,  // 5: exec.user.UserToBitHandshake.sasl_support:type_name -> exec.user.SaslSupport
	50, // 6: exec.user.RequestResults.query_id:type_name -> exec.shared.QueryId
	51, // 7: exec.user.GetQueryPlanFragments.type:type_name -> exec.shared.QueryType
	52, // 8: exec.user.QueryPlanFragments.status:type_name -> exec.shared.QueryResult.QueryState
	50, // 9: exec.user.QueryPlanFragments.query_id:type_name -> exec.shared.QueryId
	53, // 10: exec.user.QueryPlanFragments.fragments:type_name -> exec.bit.control.PlanFragment
	54, // 11: exec.user.QueryPlanFragments.error:type_name -> exec.shared.DrillPBError
	3,  // 12: exec.user.BitToUserHandshake.status:type_name -> exec.user.HandshakeStatus
	19, // 13: exec.user.BitToUserHandshake.server_infos:type_name -> exec.user.RpcEndpointInfos
	0,  // 14: exec.user.BitToUserHandshake.supported_methods:type_name -> exec.user.RpcType
	25, // 15: exec.user.GetCatalogsReq.catalog_name_filter:type_name -> exec.user.LikeFilter
	4,  // 16: exec.user.GetCatalogsResp.status:type_name -> exec.user.RequestStatus
	27, // 17: exec.user.GetCatalogsResp.catalogs:type_name -> exec.user.CatalogMetadata
	54, // 18: exec.user.GetCatalogsResp.error:type_name -> exec.shared.DrillPBError
	25, // 19: exec.user.GetSchemasReq.catalog_name_filter:type_name -> exec.user.LikeFilter
	25, // 20: exec.user.GetSchemasReq.schema_name_filter:type_name -> exec.user.LikeFilter
	4,  // 21: exec.user.GetSchemasResp.status:type_name -> exec.user.RequestStatus
	30, // 22: exec.user.GetSchemasResp.schemas:type_name -> exec.user.SchemaMetadata
	54, // 23: exec.user.GetSchemasResp.error:type_name -> exec.shared.DrillPBError
	25, // 24: exec.user.GetTablesReq.catalog_name_filter:type_name -> exec.user.LikeFilter
	25, // 25: exec.user.GetTablesReq.schema_name_filter:type_name -> exec.user.LikeFilter
	25, // 26: exec.user.GetTablesReq.table_name_filter:type_name -> exec.user.LikeFilter
	4,  // 27: exec.user.GetTablesResp.status:type_name -> exec.user.RequestStatus
	33, // 28: exec.user.GetTablesResp.tables:type_name -> exec.user.TableMetadata
	54, // 29: exec.user.GetTablesResp.error:type_name -> exec.shared.DrillPBError
	25, // 30: exec.user.GetColumnsReq.catalog_name_filter:type_name -> exec.user.LikeFilter
	25, // 31: exec.user.GetColumnsReq.schema_name_filter:type_name -> exec.user.LikeFilter
	25, // 32: exec.user.GetColumnsReq.table_name_filter:type_name -> exec.user.LikeFilter
	25, // 33: exec.user.GetColumnsReq.column_name_filter:type_name -> exec.user.LikeFilter
	4,  // 34: exec.user.GetColumnsResp.status:type_name -> exec.user.RequestStatus
	36, // 35: exec.user.GetColumnsResp.columns:type_name -> exec.user.ColumnMetadata
	54, // 36: exec.user.GetColumnsResp.error:type_name -> exec.shared.DrillPBError
	5,  // 37: exec.user.ResultColumnMetadata.searchability:type_name -> exec.user.ColumnSearchability
	6,  // 38: exec.user.ResultColumnMetadata.updatability:type_name -> exec.user.ColumnUpdatability
	39, // 39: exec.user.PreparedStatement.columns:type_name -> exec.user.ResultColumnMetadata
	40, // 40: exec.user.PreparedStatement.server_handle:type_name -> exec.user.PreparedStatementHandle
	4,  // 41: exec.user.CreatePreparedStatementResp.status:type_name -> exec.user.RequestStatus
	41, // 42: exec.user.CreatePreparedStatementResp.prepared_statement:type_name -> exec.user.PreparedStatement
	54, // 43: exec.user.CreatePreparedStatementResp.error:type_name -> exec.shared.DrillPBError
	55, // 44: exec.user.ConvertSupport.from:type_name -> common.MinorType
	55, // 45: exec.user.ConvertSupport.to:type_name -> common.MinorType
	4,  // 46: exec.user.GetServerMetaResp.status:type_name -> exec.user.RequestStatus
	46, // 47: exec.user.GetServerMetaResp.server_meta:type_name -> exec.user.ServerMeta
	54, // 48: exec.user.GetServerMetaResp.error:type_name -> exec.shared.DrillPBError
	7,  // 49: exec.user.ServerMeta.collate_support:type_name -> exec.user.CollateSupport
	44, // 50: exec.user.ServerMeta.convert_support:type_name -> exec.user.ConvertSupport
	8,  // 51: exec.user.ServerMeta.correlation_names_support:type_name -> exec.user.CorrelationNamesSupport
	9,  // 52: exec.user.ServerMeta.date_time_literals_support:type_name -> exec.user.DateTimeLiteralsSupport
	10, // 53: exec.user.ServerMeta.group_by_support:type_name -> exec.user.GroupBySupport
	11, // 54: exec.user.ServerMeta.identifier_casing:type_name -> exec.user.IdentifierCasing
	12, // 55: exec.user.ServerMeta.null_collation:type_name -> exec.user.NullCollation
	13, // 56: exec.user.ServerMeta.order_by_support:type_name -> exec.user.OrderBySupport
	14, // 57: exec.user.ServerMeta.outer_join_support:type_name -> exec.user.OuterJoinSupport
	11, // 58: exec.user.ServerMeta.quoted_identifier_casing:type_name -> exec.user.IdentifierCasing
	15, // 59: exec.user.ServerMeta.subquery_support:type_name -> exec.user.SubQuerySupport
	16, // 60: exec.user.ServerMeta.union_support:type_name -> exec.user.UnionSupport
	2,  // 61: exec.user.RunQuery.results_mode:type_name -> exec.user.QueryResultsMode
	51, // 62: exec.user.RunQuery.type:type_name -> exec.shared.QueryType
	53, // 63: exec.user.RunQuery.fragments:type_name -> exec.bit.control.PlanFragment
	40, // 64: exec.user.RunQuery.prepared_statement_handle:type_name -> exec.user.PreparedStatementHandle
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_User_proto_init() }
func file_User_proto_init() {
	if File_User_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_User_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcEndpointInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToBitHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryPlanFragments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPlanFragments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitToUserHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCatalogsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalogMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCatalogsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemasResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTablesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColumnsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColumnsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreparedStatementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultColumnMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreparedStatementHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreparedStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreparedStatementResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMetaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerMetaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_User_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_User_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_User_proto_goTypes,
		DependencyIndexes: file_User_proto_depIdxs,
		EnumInfos:         file_User_proto_enumTypes,
		MessageInfos:      file_User_proto_msgTypes,
	}.Build()
	File_User_proto = out.File
	file_User_proto_rawDesc = nil
	file_User_proto_goTypes = nil
	file_User_proto_depIdxs = nil
}
