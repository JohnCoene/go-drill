// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: BitData.proto

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package data

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/zeroshade/go-drill/internal/rpc/proto/exec"
	_ "github.com/zeroshade/go-drill/internal/rpc/proto/exec/bit"
	shared "github.com/zeroshade/go-drill/internal/rpc/proto/exec/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RpcType int32

const (
	RpcType_HANDSHAKE        RpcType = 0
	RpcType_ACK              RpcType = 1
	RpcType_GOODBYE          RpcType = 2
	RpcType_REQ_RECORD_BATCH RpcType = 3 // send record batch, returns Ack
	// both bit request and response
	RpcType_SASL_MESSAGE         RpcType = 4
	RpcType_REQ_RUNTIME_FILTER   RpcType = 5 // send runtime filter data from HashJoin to Foreman, from Foreman to Scan nodes.
	RpcType_DATA_ACK_WITH_CREDIT RpcType = 6 // a ack for data tunnel,with a runtime suggested credit as a response.
)

// Enum value maps for RpcType.
var (
	RpcType_name = map[int32]string{
		0: "HANDSHAKE",
		1: "ACK",
		2: "GOODBYE",
		3: "REQ_RECORD_BATCH",
		4: "SASL_MESSAGE",
		5: "REQ_RUNTIME_FILTER",
		6: "DATA_ACK_WITH_CREDIT",
	}
	RpcType_value = map[string]int32{
		"HANDSHAKE":            0,
		"ACK":                  1,
		"GOODBYE":              2,
		"REQ_RECORD_BATCH":     3,
		"SASL_MESSAGE":         4,
		"REQ_RUNTIME_FILTER":   5,
		"DATA_ACK_WITH_CREDIT": 6,
	}
)

func (x RpcType) Enum() *RpcType {
	p := new(RpcType)
	*p = x
	return p
}

func (x RpcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcType) Descriptor() protoreflect.EnumDescriptor {
	return file_BitData_proto_enumTypes[0].Descriptor()
}

func (RpcType) Type() protoreflect.EnumType {
	return &file_BitData_proto_enumTypes[0]
}

func (x RpcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RpcType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RpcType(num)
	return nil
}

// Deprecated: Use RpcType.Descriptor instead.
func (RpcType) EnumDescriptor() ([]byte, []int) {
	return file_BitData_proto_rawDescGZIP(), []int{0}
}

type BitClientHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcVersion *int32             `protobuf:"varint,1,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	Channel    *shared.RpcChannel `protobuf:"varint,2,opt,name=channel,enum=exec.shared.RpcChannel,def=1" json:"channel,omitempty"`
}

// Default values for BitClientHandshake fields.
const (
	Default_BitClientHandshake_Channel = shared.RpcChannel_BIT_DATA
)

func (x *BitClientHandshake) Reset() {
	*x = BitClientHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitClientHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitClientHandshake) ProtoMessage() {}

func (x *BitClientHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_BitData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitClientHandshake.ProtoReflect.Descriptor instead.
func (*BitClientHandshake) Descriptor() ([]byte, []int) {
	return file_BitData_proto_rawDescGZIP(), []int{0}
}

func (x *BitClientHandshake) GetRpcVersion() int32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *BitClientHandshake) GetChannel() shared.RpcChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_BitClientHandshake_Channel
}

type BitServerHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcVersion               *int32   `protobuf:"varint,1,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	AuthenticationMechanisms []string `protobuf:"bytes,2,rep,name=authenticationMechanisms" json:"authenticationMechanisms,omitempty"`
}

func (x *BitServerHandshake) Reset() {
	*x = BitServerHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitServerHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitServerHandshake) ProtoMessage() {}

func (x *BitServerHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_BitData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitServerHandshake.ProtoReflect.Descriptor instead.
func (*BitServerHandshake) Descriptor() ([]byte, []int) {
	return file_BitData_proto_rawDescGZIP(), []int{1}
}

func (x *BitServerHandshake) GetRpcVersion() int32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *BitServerHandshake) GetAuthenticationMechanisms() []string {
	if x != nil {
		return x.AuthenticationMechanisms
	}
	return nil
}

type FragmentRecordBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId                  *shared.QueryId        `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	ReceivingMajorFragmentId *int32                 `protobuf:"varint,2,opt,name=receiving_major_fragment_id,json=receivingMajorFragmentId" json:"receiving_major_fragment_id,omitempty"`
	ReceivingMinorFragmentId []int32                `protobuf:"varint,3,rep,name=receiving_minor_fragment_id,json=receivingMinorFragmentId" json:"receiving_minor_fragment_id,omitempty"`
	SendingMajorFragmentId   *int32                 `protobuf:"varint,4,opt,name=sending_major_fragment_id,json=sendingMajorFragmentId" json:"sending_major_fragment_id,omitempty"`
	SendingMinorFragmentId   *int32                 `protobuf:"varint,5,opt,name=sending_minor_fragment_id,json=sendingMinorFragmentId" json:"sending_minor_fragment_id,omitempty"`
	Def                      *shared.RecordBatchDef `protobuf:"bytes,6,opt,name=def" json:"def,omitempty"`
	IsLastBatch              *bool                  `protobuf:"varint,7,opt,name=isLastBatch" json:"isLastBatch,omitempty"`
}

func (x *FragmentRecordBatch) Reset() {
	*x = FragmentRecordBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentRecordBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentRecordBatch) ProtoMessage() {}

func (x *FragmentRecordBatch) ProtoReflect() protoreflect.Message {
	mi := &file_BitData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentRecordBatch.ProtoReflect.Descriptor instead.
func (*FragmentRecordBatch) Descriptor() ([]byte, []int) {
	return file_BitData_proto_rawDescGZIP(), []int{2}
}

func (x *FragmentRecordBatch) GetQueryId() *shared.QueryId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *FragmentRecordBatch) GetReceivingMajorFragmentId() int32 {
	if x != nil && x.ReceivingMajorFragmentId != nil {
		return *x.ReceivingMajorFragmentId
	}
	return 0
}

func (x *FragmentRecordBatch) GetReceivingMinorFragmentId() []int32 {
	if x != nil {
		return x.ReceivingMinorFragmentId
	}
	return nil
}

func (x *FragmentRecordBatch) GetSendingMajorFragmentId() int32 {
	if x != nil && x.SendingMajorFragmentId != nil {
		return *x.SendingMajorFragmentId
	}
	return 0
}

func (x *FragmentRecordBatch) GetSendingMinorFragmentId() int32 {
	if x != nil && x.SendingMinorFragmentId != nil {
		return *x.SendingMinorFragmentId
	}
	return 0
}

func (x *FragmentRecordBatch) GetDef() *shared.RecordBatchDef {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *FragmentRecordBatch) GetIsLastBatch() bool {
	if x != nil && x.IsLastBatch != nil {
		return *x.IsLastBatch
	}
	return false
}

type RuntimeFilterBDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId                *shared.QueryId `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	MajorFragmentId        *int32          `protobuf:"varint,2,opt,name=major_fragment_id,json=majorFragmentId" json:"major_fragment_id,omitempty"`
	MinorFragmentId        *int32          `protobuf:"varint,3,opt,name=minor_fragment_id,json=minorFragmentId" json:"minor_fragment_id,omitempty"`
	ToForeman              *bool           `protobuf:"varint,4,opt,name=to_foreman,json=toForeman" json:"to_foreman,omitempty"` // true means sending to foreman,false means sending to scan nodes
	BloomFilterSizeInBytes []int32         `protobuf:"varint,5,rep,name=bloom_filter_size_in_bytes,json=bloomFilterSizeInBytes" json:"bloom_filter_size_in_bytes,omitempty"`
	ProbeFields            []string        `protobuf:"bytes,6,rep,name=probe_fields,json=probeFields" json:"probe_fields,omitempty"`     // probe fields with corresponding BloomFilters
	HjOpId                 *int32          `protobuf:"varint,7,opt,name=hj_op_id,json=hjOpId" json:"hj_op_id,omitempty"`                 // the operator id of the HashJoin which generates this RuntimeFilter
	RfIdentifier           *int64          `protobuf:"varint,8,opt,name=rf_identifier,json=rfIdentifier" json:"rf_identifier,omitempty"` // the runtime filter identifier
}

func (x *RuntimeFilterBDef) Reset() {
	*x = RuntimeFilterBDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeFilterBDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeFilterBDef) ProtoMessage() {}

func (x *RuntimeFilterBDef) ProtoReflect() protoreflect.Message {
	mi := &file_BitData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeFilterBDef.ProtoReflect.Descriptor instead.
func (*RuntimeFilterBDef) Descriptor() ([]byte, []int) {
	return file_BitData_proto_rawDescGZIP(), []int{3}
}

func (x *RuntimeFilterBDef) GetQueryId() *shared.QueryId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *RuntimeFilterBDef) GetMajorFragmentId() int32 {
	if x != nil && x.MajorFragmentId != nil {
		return *x.MajorFragmentId
	}
	return 0
}

func (x *RuntimeFilterBDef) GetMinorFragmentId() int32 {
	if x != nil && x.MinorFragmentId != nil {
		return *x.MinorFragmentId
	}
	return 0
}

func (x *RuntimeFilterBDef) GetToForeman() bool {
	if x != nil && x.ToForeman != nil {
		return *x.ToForeman
	}
	return false
}

func (x *RuntimeFilterBDef) GetBloomFilterSizeInBytes() []int32 {
	if x != nil {
		return x.BloomFilterSizeInBytes
	}
	return nil
}

func (x *RuntimeFilterBDef) GetProbeFields() []string {
	if x != nil {
		return x.ProbeFields
	}
	return nil
}

func (x *RuntimeFilterBDef) GetHjOpId() int32 {
	if x != nil && x.HjOpId != nil {
		return *x.HjOpId
	}
	return 0
}

func (x *RuntimeFilterBDef) GetRfIdentifier() int64 {
	if x != nil && x.RfIdentifier != nil {
		return *x.RfIdentifier
	}
	return 0
}

type AckWithCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedCredit *int32 `protobuf:"varint,1,opt,name=allowed_credit,json=allowedCredit" json:"allowed_credit,omitempty"` // the credit allowed the sender to send in batch granularity
}

func (x *AckWithCredit) Reset() {
	*x = AckWithCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckWithCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckWithCredit) ProtoMessage() {}

func (x *AckWithCredit) ProtoReflect() protoreflect.Message {
	mi := &file_BitData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckWithCredit.ProtoReflect.Descriptor instead.
func (*AckWithCredit) Descriptor() ([]byte, []int) {
	return file_BitData_proto_rawDescGZIP(), []int{4}
}

func (x *AckWithCredit) GetAllowedCredit() int32 {
	if x != nil && x.AllowedCredit != nil {
		return *x.AllowedCredit
	}
	return 0
}

var File_BitData_proto protoreflect.FileDescriptor

var file_BitData_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x42, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x15,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72,
	0x0a, 0x12, 0x42, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a,
	0x08, 0x42, 0x49, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x71, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x70, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x13, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x66, 0x52, 0x03, 0x64, 0x65,
	0x66, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x22, 0xd9, 0x02, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x44, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x12, 0x3a, 0x0a, 0x1a, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x08, 0x68, 0x6a, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x6a, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x66,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x36, 0x0a, 0x0d, 0x41, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2a, 0x88, 0x01, 0x0a, 0x07, 0x52, 0x70, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x4f, 0x4f, 0x44, 0x42, 0x59, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x06, 0x42, 0x68, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x07, 0x42, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x68, 0x61,
	0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x2f, 0x62, 0x69, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61,
}

var (
	file_BitData_proto_rawDescOnce sync.Once
	file_BitData_proto_rawDescData = file_BitData_proto_rawDesc
)

func file_BitData_proto_rawDescGZIP() []byte {
	file_BitData_proto_rawDescOnce.Do(func() {
		file_BitData_proto_rawDescData = protoimpl.X.CompressGZIP(file_BitData_proto_rawDescData)
	})
	return file_BitData_proto_rawDescData
}

var file_BitData_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_BitData_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_BitData_proto_goTypes = []interface{}{
	(RpcType)(0),                  // 0: exec.bit.data.RpcType
	(*BitClientHandshake)(nil),    // 1: exec.bit.data.BitClientHandshake
	(*BitServerHandshake)(nil),    // 2: exec.bit.data.BitServerHandshake
	(*FragmentRecordBatch)(nil),   // 3: exec.bit.data.FragmentRecordBatch
	(*RuntimeFilterBDef)(nil),     // 4: exec.bit.data.RuntimeFilterBDef
	(*AckWithCredit)(nil),         // 5: exec.bit.data.AckWithCredit
	(shared.RpcChannel)(0),        // 6: exec.shared.RpcChannel
	(*shared.QueryId)(nil),        // 7: exec.shared.QueryId
	(*shared.RecordBatchDef)(nil), // 8: exec.shared.RecordBatchDef
}
var file_BitData_proto_depIdxs = []int32{
	6, // 0: exec.bit.data.BitClientHandshake.channel:type_name -> exec.shared.RpcChannel
	7, // 1: exec.bit.data.FragmentRecordBatch.query_id:type_name -> exec.shared.QueryId
	8, // 2: exec.bit.data.FragmentRecordBatch.def:type_name -> exec.shared.RecordBatchDef
	7, // 3: exec.bit.data.RuntimeFilterBDef.query_id:type_name -> exec.shared.QueryId
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_BitData_proto_init() }
func file_BitData_proto_init() {
	if File_BitData_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BitData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitClientHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitData_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitServerHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitData_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentRecordBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitData_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeFilterBDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitData_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckWithCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BitData_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BitData_proto_goTypes,
		DependencyIndexes: file_BitData_proto_depIdxs,
		EnumInfos:         file_BitData_proto_enumTypes,
		MessageInfos:      file_BitData_proto_msgTypes,
	}.Build()
	File_BitData_proto = out.File
	file_BitData_proto_rawDesc = nil
	file_BitData_proto_goTypes = nil
	file_BitData_proto_depIdxs = nil
}
