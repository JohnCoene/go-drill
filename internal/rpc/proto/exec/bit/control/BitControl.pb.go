// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: BitControl.proto

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package control

import (
	proto "github.com/golang/protobuf/proto"
	exec "github.com/factset/go-drill/internal/rpc/proto/exec"
	bit "github.com/factset/go-drill/internal/rpc/proto/exec/bit"
	shared "github.com/factset/go-drill/internal/rpc/proto/exec/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

////// BitControl RPC ///////
type RpcType int32

const (
	RpcType_HANDSHAKE RpcType = 0
	RpcType_ACK       RpcType = 1
	RpcType_GOODBYE   RpcType = 2
	// bit requests
	RpcType_REQ_INITIALIZE_FRAGMENTS RpcType = 3 // Returns Handle
	RpcType_REQ_CANCEL_FRAGMENT      RpcType = 6 // send a cancellation message for a fragment, returns Ack
	RpcType_REQ_RECEIVER_FINISHED    RpcType = 7
	RpcType_REQ_FRAGMENT_STATUS      RpcType = 8 // send a fragment status, return Ack
	RpcType_REQ_BIT_STATUS           RpcType = 9 // get bit status.
	RpcType_REQ_QUERY_STATUS         RpcType = 10
	RpcType_REQ_QUERY_CANCEL         RpcType = 15
	RpcType_REQ_UNPAUSE_FRAGMENT     RpcType = 16 // send a resume message for a fragment, returns Ack
	RpcType_REQ_CUSTOM               RpcType = 17
	// bit responses
	RpcType_RESP_FRAGMENT_HANDLE RpcType = 11
	RpcType_RESP_FRAGMENT_STATUS RpcType = 12
	RpcType_RESP_BIT_STATUS      RpcType = 13
	RpcType_RESP_QUERY_STATUS    RpcType = 14
	RpcType_RESP_CUSTOM          RpcType = 18
	// both bit request and response
	RpcType_SASL_MESSAGE RpcType = 19
)

// Enum value maps for RpcType.
var (
	RpcType_name = map[int32]string{
		0:  "HANDSHAKE",
		1:  "ACK",
		2:  "GOODBYE",
		3:  "REQ_INITIALIZE_FRAGMENTS",
		6:  "REQ_CANCEL_FRAGMENT",
		7:  "REQ_RECEIVER_FINISHED",
		8:  "REQ_FRAGMENT_STATUS",
		9:  "REQ_BIT_STATUS",
		10: "REQ_QUERY_STATUS",
		15: "REQ_QUERY_CANCEL",
		16: "REQ_UNPAUSE_FRAGMENT",
		17: "REQ_CUSTOM",
		11: "RESP_FRAGMENT_HANDLE",
		12: "RESP_FRAGMENT_STATUS",
		13: "RESP_BIT_STATUS",
		14: "RESP_QUERY_STATUS",
		18: "RESP_CUSTOM",
		19: "SASL_MESSAGE",
	}
	RpcType_value = map[string]int32{
		"HANDSHAKE":                0,
		"ACK":                      1,
		"GOODBYE":                  2,
		"REQ_INITIALIZE_FRAGMENTS": 3,
		"REQ_CANCEL_FRAGMENT":      6,
		"REQ_RECEIVER_FINISHED":    7,
		"REQ_FRAGMENT_STATUS":      8,
		"REQ_BIT_STATUS":           9,
		"REQ_QUERY_STATUS":         10,
		"REQ_QUERY_CANCEL":         15,
		"REQ_UNPAUSE_FRAGMENT":     16,
		"REQ_CUSTOM":               17,
		"RESP_FRAGMENT_HANDLE":     11,
		"RESP_FRAGMENT_STATUS":     12,
		"RESP_BIT_STATUS":          13,
		"RESP_QUERY_STATUS":        14,
		"RESP_CUSTOM":              18,
		"SASL_MESSAGE":             19,
	}
)

func (x RpcType) Enum() *RpcType {
	p := new(RpcType)
	*p = x
	return p
}

func (x RpcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcType) Descriptor() protoreflect.EnumDescriptor {
	return file_BitControl_proto_enumTypes[0].Descriptor()
}

func (RpcType) Type() protoreflect.EnumType {
	return &file_BitControl_proto_enumTypes[0]
}

func (x RpcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RpcType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RpcType(num)
	return nil
}

// Deprecated: Use RpcType.Descriptor instead.
func (RpcType) EnumDescriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{0}
}

type BitControlHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcVersion               *int32                 `protobuf:"varint,1,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	Channel                  *shared.RpcChannel     `protobuf:"varint,2,opt,name=channel,enum=exec.shared.RpcChannel,def=0" json:"channel,omitempty"`
	Endpoint                 *exec.DrillbitEndpoint `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
	AuthenticationMechanisms []string               `protobuf:"bytes,4,rep,name=authenticationMechanisms" json:"authenticationMechanisms,omitempty"`
}

// Default values for BitControlHandshake fields.
const (
	Default_BitControlHandshake_Channel = shared.RpcChannel_BIT_CONTROL
)

func (x *BitControlHandshake) Reset() {
	*x = BitControlHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitControlHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitControlHandshake) ProtoMessage() {}

func (x *BitControlHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitControlHandshake.ProtoReflect.Descriptor instead.
func (*BitControlHandshake) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{0}
}

func (x *BitControlHandshake) GetRpcVersion() int32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *BitControlHandshake) GetChannel() shared.RpcChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_BitControlHandshake_Channel
}

func (x *BitControlHandshake) GetEndpoint() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *BitControlHandshake) GetAuthenticationMechanisms() []string {
	if x != nil {
		return x.AuthenticationMechanisms
	}
	return nil
}

type BitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FragmentStatus []*FragmentStatus `protobuf:"bytes,1,rep,name=fragment_status,json=fragmentStatus" json:"fragment_status,omitempty"`
}

func (x *BitStatus) Reset() {
	*x = BitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitStatus) ProtoMessage() {}

func (x *BitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitStatus.ProtoReflect.Descriptor instead.
func (*BitStatus) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{1}
}

func (x *BitStatus) GetFragmentStatus() []*FragmentStatus {
	if x != nil {
		return x.FragmentStatus
	}
	return nil
}

type FragmentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *shared.MinorFragmentProfile `protobuf:"bytes,1,opt,name=profile" json:"profile,omitempty"`
	Handle  *bit.FragmentHandle          `protobuf:"bytes,2,opt,name=handle" json:"handle,omitempty"`
}

func (x *FragmentStatus) Reset() {
	*x = FragmentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentStatus) ProtoMessage() {}

func (x *FragmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentStatus.ProtoReflect.Descriptor instead.
func (*FragmentStatus) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{2}
}

func (x *FragmentStatus) GetProfile() *shared.MinorFragmentProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *FragmentStatus) GetHandle() *bit.FragmentHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

type InitializeFragments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fragment []*PlanFragment `protobuf:"bytes,1,rep,name=fragment" json:"fragment,omitempty"`
}

func (x *InitializeFragments) Reset() {
	*x = InitializeFragments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeFragments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeFragments) ProtoMessage() {}

func (x *InitializeFragments) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeFragments.ProtoReflect.Descriptor instead.
func (*InitializeFragments) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{3}
}

func (x *InitializeFragments) GetFragment() []*PlanFragment {
	if x != nil {
		return x.Fragment
	}
	return nil
}

type CustomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CustomMessage) Reset() {
	*x = CustomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMessage) ProtoMessage() {}

func (x *CustomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMessage.ProtoReflect.Descriptor instead.
func (*CustomMessage) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{4}
}

func (x *CustomMessage) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CustomMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PlanFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle       *bit.FragmentHandle      `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	NetworkCost  *float32                 `protobuf:"fixed32,4,opt,name=network_cost,json=networkCost" json:"network_cost,omitempty"`
	CpuCost      *float32                 `protobuf:"fixed32,5,opt,name=cpu_cost,json=cpuCost" json:"cpu_cost,omitempty"`
	DiskCost     *float32                 `protobuf:"fixed32,6,opt,name=disk_cost,json=diskCost" json:"disk_cost,omitempty"`
	MemoryCost   *float32                 `protobuf:"fixed32,7,opt,name=memory_cost,json=memoryCost" json:"memory_cost,omitempty"`
	FragmentJson *string                  `protobuf:"bytes,8,opt,name=fragment_json,json=fragmentJson" json:"fragment_json,omitempty"`
	LeafFragment *bool                    `protobuf:"varint,9,opt,name=leaf_fragment,json=leafFragment" json:"leaf_fragment,omitempty"`
	Assignment   *exec.DrillbitEndpoint   `protobuf:"bytes,10,opt,name=assignment" json:"assignment,omitempty"`
	Foreman      *exec.DrillbitEndpoint   `protobuf:"bytes,11,opt,name=foreman" json:"foreman,omitempty"`
	MemInitial   *int64                   `protobuf:"varint,12,opt,name=mem_initial,json=memInitial,def=20000000" json:"mem_initial,omitempty"` // 20 megs
	MemMax       *int64                   `protobuf:"varint,13,opt,name=mem_max,json=memMax,def=2000000000" json:"mem_max,omitempty"`           // 20 gigs
	Credentials  *shared.UserCredentials  `protobuf:"bytes,14,opt,name=credentials" json:"credentials,omitempty"`
	OptionsJson  *string                  `protobuf:"bytes,15,opt,name=options_json,json=optionsJson" json:"options_json,omitempty"`
	Context      *QueryContextInformation `protobuf:"bytes,16,opt,name=context" json:"context,omitempty"`
	Collector    []*Collector             `protobuf:"bytes,17,rep,name=collector" json:"collector,omitempty"`
}

// Default values for PlanFragment fields.
const (
	Default_PlanFragment_MemInitial = int64(20000000)
	Default_PlanFragment_MemMax     = int64(2000000000)
)

func (x *PlanFragment) Reset() {
	*x = PlanFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanFragment) ProtoMessage() {}

func (x *PlanFragment) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanFragment.ProtoReflect.Descriptor instead.
func (*PlanFragment) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{5}
}

func (x *PlanFragment) GetHandle() *bit.FragmentHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *PlanFragment) GetNetworkCost() float32 {
	if x != nil && x.NetworkCost != nil {
		return *x.NetworkCost
	}
	return 0
}

func (x *PlanFragment) GetCpuCost() float32 {
	if x != nil && x.CpuCost != nil {
		return *x.CpuCost
	}
	return 0
}

func (x *PlanFragment) GetDiskCost() float32 {
	if x != nil && x.DiskCost != nil {
		return *x.DiskCost
	}
	return 0
}

func (x *PlanFragment) GetMemoryCost() float32 {
	if x != nil && x.MemoryCost != nil {
		return *x.MemoryCost
	}
	return 0
}

func (x *PlanFragment) GetFragmentJson() string {
	if x != nil && x.FragmentJson != nil {
		return *x.FragmentJson
	}
	return ""
}

func (x *PlanFragment) GetLeafFragment() bool {
	if x != nil && x.LeafFragment != nil {
		return *x.LeafFragment
	}
	return false
}

func (x *PlanFragment) GetAssignment() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *PlanFragment) GetForeman() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Foreman
	}
	return nil
}

func (x *PlanFragment) GetMemInitial() int64 {
	if x != nil && x.MemInitial != nil {
		return *x.MemInitial
	}
	return Default_PlanFragment_MemInitial
}

func (x *PlanFragment) GetMemMax() int64 {
	if x != nil && x.MemMax != nil {
		return *x.MemMax
	}
	return Default_PlanFragment_MemMax
}

func (x *PlanFragment) GetCredentials() *shared.UserCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *PlanFragment) GetOptionsJson() string {
	if x != nil && x.OptionsJson != nil {
		return *x.OptionsJson
	}
	return ""
}

func (x *PlanFragment) GetContext() *QueryContextInformation {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PlanFragment) GetCollector() []*Collector {
	if x != nil {
		return x.Collector
	}
	return nil
}

type Collector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OppositeMajorFragmentId *int32  `protobuf:"varint,1,opt,name=opposite_major_fragment_id,json=oppositeMajorFragmentId" json:"opposite_major_fragment_id,omitempty"`
	IncomingMinorFragment   []int32 `protobuf:"varint,2,rep,packed,name=incoming_minor_fragment,json=incomingMinorFragment" json:"incoming_minor_fragment,omitempty"`
	SupportsOutOfOrder      *bool   `protobuf:"varint,3,opt,name=supports_out_of_order,json=supportsOutOfOrder" json:"supports_out_of_order,omitempty"`
	IsSpooling              *bool   `protobuf:"varint,4,opt,name=is_spooling,json=isSpooling" json:"is_spooling,omitempty"`
	EnableDynamicFc         *bool   `protobuf:"varint,5,opt,name=enable_dynamic_fc,json=enableDynamicFc" json:"enable_dynamic_fc,omitempty"`
}

func (x *Collector) Reset() {
	*x = Collector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collector) ProtoMessage() {}

func (x *Collector) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collector.ProtoReflect.Descriptor instead.
func (*Collector) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{6}
}

func (x *Collector) GetOppositeMajorFragmentId() int32 {
	if x != nil && x.OppositeMajorFragmentId != nil {
		return *x.OppositeMajorFragmentId
	}
	return 0
}

func (x *Collector) GetIncomingMinorFragment() []int32 {
	if x != nil {
		return x.IncomingMinorFragment
	}
	return nil
}

func (x *Collector) GetSupportsOutOfOrder() bool {
	if x != nil && x.SupportsOutOfOrder != nil {
		return *x.SupportsOutOfOrder
	}
	return false
}

func (x *Collector) GetIsSpooling() bool {
	if x != nil && x.IsSpooling != nil {
		return *x.IsSpooling
	}
	return false
}

func (x *Collector) GetEnableDynamicFc() bool {
	if x != nil && x.EnableDynamicFc != nil {
		return *x.EnableDynamicFc
	}
	return false
}

type QueryContextInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryStartTime    *int64  `protobuf:"varint,1,opt,name=query_start_time,json=queryStartTime" json:"query_start_time,omitempty"`         // start time of query in milliseconds
	TimeZone          *int32  `protobuf:"varint,2,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`                             // timezone of the Drillbit where user is connected
	DefaultSchemaName *string `protobuf:"bytes,3,opt,name=default_schema_name,json=defaultSchemaName" json:"default_schema_name,omitempty"` // default schema in current session when the query is submitted
	SessionId         *string `protobuf:"bytes,4,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`                           // current session id
}

func (x *QueryContextInformation) Reset() {
	*x = QueryContextInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContextInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContextInformation) ProtoMessage() {}

func (x *QueryContextInformation) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContextInformation.ProtoReflect.Descriptor instead.
func (*QueryContextInformation) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{7}
}

func (x *QueryContextInformation) GetQueryStartTime() int64 {
	if x != nil && x.QueryStartTime != nil {
		return *x.QueryStartTime
	}
	return 0
}

func (x *QueryContextInformation) GetTimeZone() int32 {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return 0
}

func (x *QueryContextInformation) GetDefaultSchemaName() string {
	if x != nil && x.DefaultSchemaName != nil {
		return *x.DefaultSchemaName
	}
	return ""
}

func (x *QueryContextInformation) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type WorkQueueStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint    *exec.DrillbitEndpoint `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	QueueLength *int32                 `protobuf:"varint,2,opt,name=queue_length,json=queueLength" json:"queue_length,omitempty"`
	ReportTime  *int64                 `protobuf:"varint,3,opt,name=report_time,json=reportTime" json:"report_time,omitempty"`
}

func (x *WorkQueueStatus) Reset() {
	*x = WorkQueueStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkQueueStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkQueueStatus) ProtoMessage() {}

func (x *WorkQueueStatus) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkQueueStatus.ProtoReflect.Descriptor instead.
func (*WorkQueueStatus) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{8}
}

func (x *WorkQueueStatus) GetEndpoint() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *WorkQueueStatus) GetQueueLength() int32 {
	if x != nil && x.QueueLength != nil {
		return *x.QueueLength
	}
	return 0
}

func (x *WorkQueueStatus) GetReportTime() int64 {
	if x != nil && x.ReportTime != nil {
		return *x.ReportTime
	}
	return 0
}

type FinishedReceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *bit.FragmentHandle `protobuf:"bytes,1,opt,name=receiver" json:"receiver,omitempty"`
	Sender   *bit.FragmentHandle `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
}

func (x *FinishedReceiver) Reset() {
	*x = FinishedReceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitControl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishedReceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishedReceiver) ProtoMessage() {}

func (x *FinishedReceiver) ProtoReflect() protoreflect.Message {
	mi := &file_BitControl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishedReceiver.ProtoReflect.Descriptor instead.
func (*FinishedReceiver) Descriptor() ([]byte, []int) {
	return file_BitControl_proto_rawDescGZIP(), []int{9}
}

func (x *FinishedReceiver) GetReceiver() *bit.FragmentHandle {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *FinishedReceiver) GetSender() *bit.FragmentHandle {
	if x != nil {
		return x.Sender
	}
	return nil
}

var File_BitControl_proto protoreflect.FileDescriptor

var file_BitControl_proto_rawDesc = []byte{
	0x0a, 0x10, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x70, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x70, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x0b, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x22, 0x56, 0x0a,
	0x09, 0x42, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7f, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x66, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x44, 0x72, 0x69,
	0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x66, 0x6f, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x08, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x0a, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x84,
	0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1a,
	0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x17, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x46, 0x63, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2a,
	0x86, 0x03, 0x0a, 0x07, 0x52, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43,
	0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4f, 0x4f, 0x44, 0x42, 0x59, 0x45, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46, 0x52, 0x41,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x51, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x51, 0x5f, 0x55, 0x4e, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x46, 0x52,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x0b, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53,
	0x50, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0d, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x13, 0x42, 0x6e, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0a, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x64,
	0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x2f, 0x62, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
}

var (
	file_BitControl_proto_rawDescOnce sync.Once
	file_BitControl_proto_rawDescData = file_BitControl_proto_rawDesc
)

func file_BitControl_proto_rawDescGZIP() []byte {
	file_BitControl_proto_rawDescOnce.Do(func() {
		file_BitControl_proto_rawDescData = protoimpl.X.CompressGZIP(file_BitControl_proto_rawDescData)
	})
	return file_BitControl_proto_rawDescData
}

var file_BitControl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_BitControl_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_BitControl_proto_goTypes = []interface{}{
	(RpcType)(0),                        // 0: exec.bit.control.RpcType
	(*BitControlHandshake)(nil),         // 1: exec.bit.control.BitControlHandshake
	(*BitStatus)(nil),                   // 2: exec.bit.control.BitStatus
	(*FragmentStatus)(nil),              // 3: exec.bit.control.FragmentStatus
	(*InitializeFragments)(nil),         // 4: exec.bit.control.InitializeFragments
	(*CustomMessage)(nil),               // 5: exec.bit.control.CustomMessage
	(*PlanFragment)(nil),                // 6: exec.bit.control.PlanFragment
	(*Collector)(nil),                   // 7: exec.bit.control.Collector
	(*QueryContextInformation)(nil),     // 8: exec.bit.control.QueryContextInformation
	(*WorkQueueStatus)(nil),             // 9: exec.bit.control.WorkQueueStatus
	(*FinishedReceiver)(nil),            // 10: exec.bit.control.FinishedReceiver
	(shared.RpcChannel)(0),              // 11: exec.shared.RpcChannel
	(*exec.DrillbitEndpoint)(nil),       // 12: exec.DrillbitEndpoint
	(*shared.MinorFragmentProfile)(nil), // 13: exec.shared.MinorFragmentProfile
	(*bit.FragmentHandle)(nil),          // 14: exec.bit.FragmentHandle
	(*shared.UserCredentials)(nil),      // 15: exec.shared.UserCredentials
}
var file_BitControl_proto_depIdxs = []int32{
	11, // 0: exec.bit.control.BitControlHandshake.channel:type_name -> exec.shared.RpcChannel
	12, // 1: exec.bit.control.BitControlHandshake.endpoint:type_name -> exec.DrillbitEndpoint
	3,  // 2: exec.bit.control.BitStatus.fragment_status:type_name -> exec.bit.control.FragmentStatus
	13, // 3: exec.bit.control.FragmentStatus.profile:type_name -> exec.shared.MinorFragmentProfile
	14, // 4: exec.bit.control.FragmentStatus.handle:type_name -> exec.bit.FragmentHandle
	6,  // 5: exec.bit.control.InitializeFragments.fragment:type_name -> exec.bit.control.PlanFragment
	14, // 6: exec.bit.control.PlanFragment.handle:type_name -> exec.bit.FragmentHandle
	12, // 7: exec.bit.control.PlanFragment.assignment:type_name -> exec.DrillbitEndpoint
	12, // 8: exec.bit.control.PlanFragment.foreman:type_name -> exec.DrillbitEndpoint
	15, // 9: exec.bit.control.PlanFragment.credentials:type_name -> exec.shared.UserCredentials
	8,  // 10: exec.bit.control.PlanFragment.context:type_name -> exec.bit.control.QueryContextInformation
	7,  // 11: exec.bit.control.PlanFragment.collector:type_name -> exec.bit.control.Collector
	12, // 12: exec.bit.control.WorkQueueStatus.endpoint:type_name -> exec.DrillbitEndpoint
	14, // 13: exec.bit.control.FinishedReceiver.receiver:type_name -> exec.bit.FragmentHandle
	14, // 14: exec.bit.control.FinishedReceiver.sender:type_name -> exec.bit.FragmentHandle
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_BitControl_proto_init() }
func file_BitControl_proto_init() {
	if File_BitControl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BitControl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitControlHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeFragments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContextInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkQueueStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitControl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishedReceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BitControl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BitControl_proto_goTypes,
		DependencyIndexes: file_BitControl_proto_depIdxs,
		EnumInfos:         file_BitControl_proto_enumTypes,
		MessageInfos:      file_BitControl_proto_msgTypes,
	}.Build()
	File_BitControl_proto = out.File
	file_BitControl_proto_rawDesc = nil
	file_BitControl_proto_goTypes = nil
	file_BitControl_proto_depIdxs = nil
}
