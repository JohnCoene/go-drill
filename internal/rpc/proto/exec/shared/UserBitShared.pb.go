// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: UserBitShared.proto

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package shared

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/zeroshade/go-drill/internal/rpc/proto/common"
	exec "github.com/zeroshade/go-drill/internal/rpc/proto/exec"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RpcChannel int32

const (
	RpcChannel_BIT_CONTROL RpcChannel = 0
	RpcChannel_BIT_DATA    RpcChannel = 1
	RpcChannel_USER        RpcChannel = 2
)

// Enum value maps for RpcChannel.
var (
	RpcChannel_name = map[int32]string{
		0: "BIT_CONTROL",
		1: "BIT_DATA",
		2: "USER",
	}
	RpcChannel_value = map[string]int32{
		"BIT_CONTROL": 0,
		"BIT_DATA":    1,
		"USER":        2,
	}
)

func (x RpcChannel) Enum() *RpcChannel {
	p := new(RpcChannel)
	*p = x
	return p
}

func (x RpcChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[0].Descriptor()
}

func (RpcChannel) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[0]
}

func (x RpcChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RpcChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RpcChannel(num)
	return nil
}

// Deprecated: Use RpcChannel.Descriptor instead.
func (RpcChannel) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{0}
}

type QueryType int32

const (
	QueryType_SQL       QueryType = 1
	QueryType_LOGICAL   QueryType = 2
	QueryType_PHYSICAL  QueryType = 3
	QueryType_EXECUTION QueryType = 4
	// Input is a prepared statement
	QueryType_PREPARED_STATEMENT QueryType = 5
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		1: "SQL",
		2: "LOGICAL",
		3: "PHYSICAL",
		4: "EXECUTION",
		5: "PREPARED_STATEMENT",
	}
	QueryType_value = map[string]int32{
		"SQL":                1,
		"LOGICAL":            2,
		"PHYSICAL":           3,
		"EXECUTION":          4,
		"PREPARED_STATEMENT": 5,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[1].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[1]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QueryType(num)
	return nil
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{1}
}

type FragmentState int32

const (
	FragmentState_SENDING                FragmentState = 0
	FragmentState_AWAITING_ALLOCATION    FragmentState = 1
	FragmentState_RUNNING                FragmentState = 2
	FragmentState_FINISHED               FragmentState = 3
	FragmentState_CANCELLED              FragmentState = 4
	FragmentState_FAILED                 FragmentState = 5
	FragmentState_CANCELLATION_REQUESTED FragmentState = 6
)

// Enum value maps for FragmentState.
var (
	FragmentState_name = map[int32]string{
		0: "SENDING",
		1: "AWAITING_ALLOCATION",
		2: "RUNNING",
		3: "FINISHED",
		4: "CANCELLED",
		5: "FAILED",
		6: "CANCELLATION_REQUESTED",
	}
	FragmentState_value = map[string]int32{
		"SENDING":                0,
		"AWAITING_ALLOCATION":    1,
		"RUNNING":                2,
		"FINISHED":               3,
		"CANCELLED":              4,
		"FAILED":                 5,
		"CANCELLATION_REQUESTED": 6,
	}
)

func (x FragmentState) Enum() *FragmentState {
	p := new(FragmentState)
	*p = x
	return p
}

func (x FragmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FragmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[2].Descriptor()
}

func (FragmentState) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[2]
}

func (x FragmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FragmentState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FragmentState(num)
	return nil
}

// Deprecated: Use FragmentState.Descriptor instead.
func (FragmentState) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{2}
}

type CoreOperatorType int32

const (
	CoreOperatorType_SINGLE_SENDER                            CoreOperatorType = 0
	CoreOperatorType_BROADCAST_SENDER                         CoreOperatorType = 1
	CoreOperatorType_FILTER                                   CoreOperatorType = 2
	CoreOperatorType_HASH_AGGREGATE                           CoreOperatorType = 3
	CoreOperatorType_HASH_JOIN                                CoreOperatorType = 4
	CoreOperatorType_MERGE_JOIN                               CoreOperatorType = 5
	CoreOperatorType_HASH_PARTITION_SENDER                    CoreOperatorType = 6
	CoreOperatorType_LIMIT                                    CoreOperatorType = 7
	CoreOperatorType_MERGING_RECEIVER                         CoreOperatorType = 8
	CoreOperatorType_ORDERED_PARTITION_SENDER                 CoreOperatorType = 9
	CoreOperatorType_PROJECT                                  CoreOperatorType = 10
	CoreOperatorType_UNORDERED_RECEIVER                       CoreOperatorType = 11
	CoreOperatorType_RANGE_PARTITION_SENDER                   CoreOperatorType = 12
	CoreOperatorType_SCREEN                                   CoreOperatorType = 13
	CoreOperatorType_SELECTION_VECTOR_REMOVER                 CoreOperatorType = 14
	CoreOperatorType_STREAMING_AGGREGATE                      CoreOperatorType = 15
	CoreOperatorType_TOP_N_SORT                               CoreOperatorType = 16
	CoreOperatorType_EXTERNAL_SORT                            CoreOperatorType = 17
	CoreOperatorType_TRACE                                    CoreOperatorType = 18
	CoreOperatorType_UNION                                    CoreOperatorType = 19
	CoreOperatorType_OLD_SORT                                 CoreOperatorType = 20
	CoreOperatorType_PARQUET_ROW_GROUP_SCAN                   CoreOperatorType = 21
	CoreOperatorType_HIVE_SUB_SCAN                            CoreOperatorType = 22
	CoreOperatorType_SYSTEM_TABLE_SCAN                        CoreOperatorType = 23
	CoreOperatorType_MOCK_SUB_SCAN                            CoreOperatorType = 24
	CoreOperatorType_PARQUET_WRITER                           CoreOperatorType = 25
	CoreOperatorType_DIRECT_SUB_SCAN                          CoreOperatorType = 26
	CoreOperatorType_TEXT_WRITER                              CoreOperatorType = 27
	CoreOperatorType_TEXT_SUB_SCAN                            CoreOperatorType = 28
	CoreOperatorType_JSON_SUB_SCAN                            CoreOperatorType = 29
	CoreOperatorType_INFO_SCHEMA_SUB_SCAN                     CoreOperatorType = 30
	CoreOperatorType_COMPLEX_TO_JSON                          CoreOperatorType = 31
	CoreOperatorType_PRODUCER_CONSUMER                        CoreOperatorType = 32
	CoreOperatorType_HBASE_SUB_SCAN                           CoreOperatorType = 33
	CoreOperatorType_WINDOW                                   CoreOperatorType = 34
	CoreOperatorType_NESTED_LOOP_JOIN                         CoreOperatorType = 35
	CoreOperatorType_AVRO_SUB_SCAN                            CoreOperatorType = 36
	CoreOperatorType_PCAP_SUB_SCAN                            CoreOperatorType = 37
	CoreOperatorType_KAFKA_SUB_SCAN                           CoreOperatorType = 38
	CoreOperatorType_KUDU_SUB_SCAN                            CoreOperatorType = 39
	CoreOperatorType_FLATTEN                                  CoreOperatorType = 40
	CoreOperatorType_LATERAL_JOIN                             CoreOperatorType = 41
	CoreOperatorType_UNNEST                                   CoreOperatorType = 42
	CoreOperatorType_HIVE_DRILL_NATIVE_PARQUET_ROW_GROUP_SCAN CoreOperatorType = 43
	CoreOperatorType_JDBC_SCAN                                CoreOperatorType = 44
	CoreOperatorType_REGEX_SUB_SCAN                           CoreOperatorType = 45
	CoreOperatorType_MAPRDB_SUB_SCAN                          CoreOperatorType = 46
	CoreOperatorType_MONGO_SUB_SCAN                           CoreOperatorType = 47
	CoreOperatorType_KUDU_WRITER                              CoreOperatorType = 48
	CoreOperatorType_OPEN_TSDB_SUB_SCAN                       CoreOperatorType = 49
	CoreOperatorType_JSON_WRITER                              CoreOperatorType = 50
	CoreOperatorType_HTPPD_LOG_SUB_SCAN                       CoreOperatorType = 51
	CoreOperatorType_IMAGE_SUB_SCAN                           CoreOperatorType = 52
	CoreOperatorType_SEQUENCE_SUB_SCAN                        CoreOperatorType = 53
	CoreOperatorType_PARTITION_LIMIT                          CoreOperatorType = 54
	CoreOperatorType_PCAPNG_SUB_SCAN                          CoreOperatorType = 55
	CoreOperatorType_RUNTIME_FILTER                           CoreOperatorType = 56
	CoreOperatorType_ROWKEY_JOIN                              CoreOperatorType = 57
	CoreOperatorType_SYSLOG_SUB_SCAN                          CoreOperatorType = 58
	CoreOperatorType_STATISTICS_AGGREGATE                     CoreOperatorType = 59
	CoreOperatorType_UNPIVOT_MAPS                             CoreOperatorType = 60
	CoreOperatorType_STATISTICS_MERGE                         CoreOperatorType = 61
	CoreOperatorType_LTSV_SUB_SCAN                            CoreOperatorType = 62
	CoreOperatorType_HDF5_SUB_SCAN                            CoreOperatorType = 63
	CoreOperatorType_EXCEL_SUB_SCAN                           CoreOperatorType = 64
	CoreOperatorType_SHP_SUB_SCAN                             CoreOperatorType = 65
	CoreOperatorType_METADATA_HANDLER                         CoreOperatorType = 66
	CoreOperatorType_METADATA_CONTROLLER                      CoreOperatorType = 67
	CoreOperatorType_DRUID_SUB_SCAN                           CoreOperatorType = 68
	CoreOperatorType_SPSS_SUB_SCAN                            CoreOperatorType = 69
	CoreOperatorType_HTTP_SUB_SCAN                            CoreOperatorType = 70
)

// Enum value maps for CoreOperatorType.
var (
	CoreOperatorType_name = map[int32]string{
		0:  "SINGLE_SENDER",
		1:  "BROADCAST_SENDER",
		2:  "FILTER",
		3:  "HASH_AGGREGATE",
		4:  "HASH_JOIN",
		5:  "MERGE_JOIN",
		6:  "HASH_PARTITION_SENDER",
		7:  "LIMIT",
		8:  "MERGING_RECEIVER",
		9:  "ORDERED_PARTITION_SENDER",
		10: "PROJECT",
		11: "UNORDERED_RECEIVER",
		12: "RANGE_PARTITION_SENDER",
		13: "SCREEN",
		14: "SELECTION_VECTOR_REMOVER",
		15: "STREAMING_AGGREGATE",
		16: "TOP_N_SORT",
		17: "EXTERNAL_SORT",
		18: "TRACE",
		19: "UNION",
		20: "OLD_SORT",
		21: "PARQUET_ROW_GROUP_SCAN",
		22: "HIVE_SUB_SCAN",
		23: "SYSTEM_TABLE_SCAN",
		24: "MOCK_SUB_SCAN",
		25: "PARQUET_WRITER",
		26: "DIRECT_SUB_SCAN",
		27: "TEXT_WRITER",
		28: "TEXT_SUB_SCAN",
		29: "JSON_SUB_SCAN",
		30: "INFO_SCHEMA_SUB_SCAN",
		31: "COMPLEX_TO_JSON",
		32: "PRODUCER_CONSUMER",
		33: "HBASE_SUB_SCAN",
		34: "WINDOW",
		35: "NESTED_LOOP_JOIN",
		36: "AVRO_SUB_SCAN",
		37: "PCAP_SUB_SCAN",
		38: "KAFKA_SUB_SCAN",
		39: "KUDU_SUB_SCAN",
		40: "FLATTEN",
		41: "LATERAL_JOIN",
		42: "UNNEST",
		43: "HIVE_DRILL_NATIVE_PARQUET_ROW_GROUP_SCAN",
		44: "JDBC_SCAN",
		45: "REGEX_SUB_SCAN",
		46: "MAPRDB_SUB_SCAN",
		47: "MONGO_SUB_SCAN",
		48: "KUDU_WRITER",
		49: "OPEN_TSDB_SUB_SCAN",
		50: "JSON_WRITER",
		51: "HTPPD_LOG_SUB_SCAN",
		52: "IMAGE_SUB_SCAN",
		53: "SEQUENCE_SUB_SCAN",
		54: "PARTITION_LIMIT",
		55: "PCAPNG_SUB_SCAN",
		56: "RUNTIME_FILTER",
		57: "ROWKEY_JOIN",
		58: "SYSLOG_SUB_SCAN",
		59: "STATISTICS_AGGREGATE",
		60: "UNPIVOT_MAPS",
		61: "STATISTICS_MERGE",
		62: "LTSV_SUB_SCAN",
		63: "HDF5_SUB_SCAN",
		64: "EXCEL_SUB_SCAN",
		65: "SHP_SUB_SCAN",
		66: "METADATA_HANDLER",
		67: "METADATA_CONTROLLER",
		68: "DRUID_SUB_SCAN",
		69: "SPSS_SUB_SCAN",
		70: "HTTP_SUB_SCAN",
	}
	CoreOperatorType_value = map[string]int32{
		"SINGLE_SENDER":            0,
		"BROADCAST_SENDER":         1,
		"FILTER":                   2,
		"HASH_AGGREGATE":           3,
		"HASH_JOIN":                4,
		"MERGE_JOIN":               5,
		"HASH_PARTITION_SENDER":    6,
		"LIMIT":                    7,
		"MERGING_RECEIVER":         8,
		"ORDERED_PARTITION_SENDER": 9,
		"PROJECT":                  10,
		"UNORDERED_RECEIVER":       11,
		"RANGE_PARTITION_SENDER":   12,
		"SCREEN":                   13,
		"SELECTION_VECTOR_REMOVER": 14,
		"STREAMING_AGGREGATE":      15,
		"TOP_N_SORT":               16,
		"EXTERNAL_SORT":            17,
		"TRACE":                    18,
		"UNION":                    19,
		"OLD_SORT":                 20,
		"PARQUET_ROW_GROUP_SCAN":   21,
		"HIVE_SUB_SCAN":            22,
		"SYSTEM_TABLE_SCAN":        23,
		"MOCK_SUB_SCAN":            24,
		"PARQUET_WRITER":           25,
		"DIRECT_SUB_SCAN":          26,
		"TEXT_WRITER":              27,
		"TEXT_SUB_SCAN":            28,
		"JSON_SUB_SCAN":            29,
		"INFO_SCHEMA_SUB_SCAN":     30,
		"COMPLEX_TO_JSON":          31,
		"PRODUCER_CONSUMER":        32,
		"HBASE_SUB_SCAN":           33,
		"WINDOW":                   34,
		"NESTED_LOOP_JOIN":         35,
		"AVRO_SUB_SCAN":            36,
		"PCAP_SUB_SCAN":            37,
		"KAFKA_SUB_SCAN":           38,
		"KUDU_SUB_SCAN":            39,
		"FLATTEN":                  40,
		"LATERAL_JOIN":             41,
		"UNNEST":                   42,
		"HIVE_DRILL_NATIVE_PARQUET_ROW_GROUP_SCAN": 43,
		"JDBC_SCAN":            44,
		"REGEX_SUB_SCAN":       45,
		"MAPRDB_SUB_SCAN":      46,
		"MONGO_SUB_SCAN":       47,
		"KUDU_WRITER":          48,
		"OPEN_TSDB_SUB_SCAN":   49,
		"JSON_WRITER":          50,
		"HTPPD_LOG_SUB_SCAN":   51,
		"IMAGE_SUB_SCAN":       52,
		"SEQUENCE_SUB_SCAN":    53,
		"PARTITION_LIMIT":      54,
		"PCAPNG_SUB_SCAN":      55,
		"RUNTIME_FILTER":       56,
		"ROWKEY_JOIN":          57,
		"SYSLOG_SUB_SCAN":      58,
		"STATISTICS_AGGREGATE": 59,
		"UNPIVOT_MAPS":         60,
		"STATISTICS_MERGE":     61,
		"LTSV_SUB_SCAN":        62,
		"HDF5_SUB_SCAN":        63,
		"EXCEL_SUB_SCAN":       64,
		"SHP_SUB_SCAN":         65,
		"METADATA_HANDLER":     66,
		"METADATA_CONTROLLER":  67,
		"DRUID_SUB_SCAN":       68,
		"SPSS_SUB_SCAN":        69,
		"HTTP_SUB_SCAN":        70,
	}
)

func (x CoreOperatorType) Enum() *CoreOperatorType {
	p := new(CoreOperatorType)
	*p = x
	return p
}

func (x CoreOperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreOperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[3].Descriptor()
}

func (CoreOperatorType) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[3]
}

func (x CoreOperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CoreOperatorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CoreOperatorType(num)
	return nil
}

// Deprecated: Use CoreOperatorType.Descriptor instead.
func (CoreOperatorType) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{3}
}

type SaslStatus int32

const (
	SaslStatus_SASL_UNKNOWN     SaslStatus = 0
	SaslStatus_SASL_START       SaslStatus = 1
	SaslStatus_SASL_IN_PROGRESS SaslStatus = 2
	SaslStatus_SASL_SUCCESS     SaslStatus = 3
	SaslStatus_SASL_FAILED      SaslStatus = 4
)

// Enum value maps for SaslStatus.
var (
	SaslStatus_name = map[int32]string{
		0: "SASL_UNKNOWN",
		1: "SASL_START",
		2: "SASL_IN_PROGRESS",
		3: "SASL_SUCCESS",
		4: "SASL_FAILED",
	}
	SaslStatus_value = map[string]int32{
		"SASL_UNKNOWN":     0,
		"SASL_START":       1,
		"SASL_IN_PROGRESS": 2,
		"SASL_SUCCESS":     3,
		"SASL_FAILED":      4,
	}
)

func (x SaslStatus) Enum() *SaslStatus {
	p := new(SaslStatus)
	*p = x
	return p
}

func (x SaslStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaslStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[4].Descriptor()
}

func (SaslStatus) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[4]
}

func (x SaslStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SaslStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SaslStatus(num)
	return nil
}

// Deprecated: Use SaslStatus.Descriptor instead.
func (SaslStatus) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{4}
}

type DrillPBError_ErrorType int32

const (
	// equivalent to SQLClientInfoException
	// - handshake version error
	// - invalid schema
	DrillPBError_CONNECTION DrillPBError_ErrorType = 0
	// equivalent to SQLRecoverableException
	// - corrupt files: can't be read. FS read error
	// - parsing error due to incomplete or incorrectly written records
	DrillPBError_DATA_READ DrillPBError_ErrorType = 1
	// equivalent to SQLDataException
	// - data type unsupported by format
	DrillPBError_DATA_WRITE DrillPBError_ErrorType = 2
	// equivalent to SQLDataException
	// - Casting errors
	// - function not found for incoming types after implicit casting
	// - Flatten misuse
	DrillPBError_FUNCTION DrillPBError_ErrorType = 3
	// equivalent to SQLSyntaxErrorException
	// - typos
	// - missing table
	// - SQL keyword misuse
	// - function names/resolution
	DrillPBError_PARSE DrillPBError_ErrorType = 4
	// equivalent to SQLInvalidAuthorizationSpecException
	DrillPBError_PERMISSION DrillPBError_ErrorType = 5
	// equivalent to SQLNonTransientException
	DrillPBError_PLAN DrillPBError_ErrorType = 6
	// equivalent to SQLRecoverableException or SQLTransientException
	// - Recoverable: memory, disk
	// - Transient: network
	DrillPBError_RESOURCE DrillPBError_ErrorType = 7
	// equivalent to SQLNonTransientException.
	// - unexpected internal state
	// - uncategorized operation
	// general user action is to contact the Drill team for
	// assistance
	DrillPBError_SYSTEM DrillPBError_ErrorType = 8
	// equivalent to SQLFeatureNotSupportedException
	// - unimplemented feature, option, or execution path
	// - schema change in operator that does not support it
	DrillPBError_UNSUPPORTED_OPERATION DrillPBError_ErrorType = 9
	// SQL validation exception
	// - invalid schema path
	// - invalid entries in SQL tree
	DrillPBError_VALIDATION DrillPBError_ErrorType = 10
	// Execution exception
	//  - Internal errors not related to bad code
	DrillPBError_EXECUTION_ERROR DrillPBError_ErrorType = 11
	// Internal exception
	//  - Failed assertions
	//  - Other "this should not happen" cases
	DrillPBError_INTERNAL_ERROR DrillPBError_ErrorType = 12
	// Unspecified exception
	//  - Exception caught but cause is unknown
	// Indicates code that needs revisiting to move error reporting
	// closer to the cause.
	DrillPBError_UNSPECIFIED_ERROR DrillPBError_ErrorType = 13
)

// Enum value maps for DrillPBError_ErrorType.
var (
	DrillPBError_ErrorType_name = map[int32]string{
		0:  "CONNECTION",
		1:  "DATA_READ",
		2:  "DATA_WRITE",
		3:  "FUNCTION",
		4:  "PARSE",
		5:  "PERMISSION",
		6:  "PLAN",
		7:  "RESOURCE",
		8:  "SYSTEM",
		9:  "UNSUPPORTED_OPERATION",
		10: "VALIDATION",
		11: "EXECUTION_ERROR",
		12: "INTERNAL_ERROR",
		13: "UNSPECIFIED_ERROR",
	}
	DrillPBError_ErrorType_value = map[string]int32{
		"CONNECTION":            0,
		"DATA_READ":             1,
		"DATA_WRITE":            2,
		"FUNCTION":              3,
		"PARSE":                 4,
		"PERMISSION":            5,
		"PLAN":                  6,
		"RESOURCE":              7,
		"SYSTEM":                8,
		"UNSUPPORTED_OPERATION": 9,
		"VALIDATION":            10,
		"EXECUTION_ERROR":       11,
		"INTERNAL_ERROR":        12,
		"UNSPECIFIED_ERROR":     13,
	}
)

func (x DrillPBError_ErrorType) Enum() *DrillPBError_ErrorType {
	p := new(DrillPBError_ErrorType)
	*p = x
	return p
}

func (x DrillPBError_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrillPBError_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[5].Descriptor()
}

func (DrillPBError_ErrorType) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[5]
}

func (x DrillPBError_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrillPBError_ErrorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrillPBError_ErrorType(num)
	return nil
}

// Deprecated: Use DrillPBError_ErrorType.Descriptor instead.
func (DrillPBError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{2, 0}
}

type NamePart_Type int32

const (
	NamePart_NAME  NamePart_Type = 0
	NamePart_ARRAY NamePart_Type = 1
)

// Enum value maps for NamePart_Type.
var (
	NamePart_Type_name = map[int32]string{
		0: "NAME",
		1: "ARRAY",
	}
	NamePart_Type_value = map[string]int32{
		"NAME":  0,
		"ARRAY": 1,
	}
)

func (x NamePart_Type) Enum() *NamePart_Type {
	p := new(NamePart_Type)
	*p = x
	return p
}

func (x NamePart_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamePart_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[6].Descriptor()
}

func (NamePart_Type) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[6]
}

func (x NamePart_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NamePart_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NamePart_Type(num)
	return nil
}

// Deprecated: Use NamePart_Type.Descriptor instead.
func (NamePart_Type) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{7, 0}
}

type QueryResult_QueryState int32

const (
	QueryResult_STARTING               QueryResult_QueryState = 0 // query has been scheduled for execution. This is post-enqueued.
	QueryResult_RUNNING                QueryResult_QueryState = 1
	QueryResult_COMPLETED              QueryResult_QueryState = 2 // query has completed successfully
	QueryResult_CANCELED               QueryResult_QueryState = 3 // query has been cancelled, and all cleanup is complete
	QueryResult_FAILED                 QueryResult_QueryState = 4
	QueryResult_CANCELLATION_REQUESTED QueryResult_QueryState = 5 // cancellation has been requested, and is being processed
	QueryResult_ENQUEUED               QueryResult_QueryState = 6 // query has been enqueued. this is pre-starting.
	QueryResult_PREPARING              QueryResult_QueryState = 7 // query is at preparation stage, foreman is initializing
	QueryResult_PLANNING               QueryResult_QueryState = 8 // query is at planning stage (includes logical or / and physical planning)
)

// Enum value maps for QueryResult_QueryState.
var (
	QueryResult_QueryState_name = map[int32]string{
		0: "STARTING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "CANCELED",
		4: "FAILED",
		5: "CANCELLATION_REQUESTED",
		6: "ENQUEUED",
		7: "PREPARING",
		8: "PLANNING",
	}
	QueryResult_QueryState_value = map[string]int32{
		"STARTING":               0,
		"RUNNING":                1,
		"COMPLETED":              2,
		"CANCELED":               3,
		"FAILED":                 4,
		"CANCELLATION_REQUESTED": 5,
		"ENQUEUED":               6,
		"PREPARING":              7,
		"PLANNING":               8,
	}
)

func (x QueryResult_QueryState) Enum() *QueryResult_QueryState {
	p := new(QueryResult_QueryState)
	*p = x
	return p
}

func (x QueryResult_QueryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryResult_QueryState) Descriptor() protoreflect.EnumDescriptor {
	return file_UserBitShared_proto_enumTypes[7].Descriptor()
}

func (QueryResult_QueryState) Type() protoreflect.EnumType {
	return &file_UserBitShared_proto_enumTypes[7]
}

func (x QueryResult_QueryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QueryResult_QueryState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QueryResult_QueryState(num)
	return nil
}

// Deprecated: Use QueryResult_QueryState.Descriptor instead.
func (QueryResult_QueryState) EnumDescriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{10, 0}
}

type UserCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (x *UserCredentials) Reset() {
	*x = UserCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCredentials) ProtoMessage() {}

func (x *UserCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCredentials.ProtoReflect.Descriptor instead.
func (*UserCredentials) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{0}
}

func (x *UserCredentials) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type QueryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Part1 *int64 `protobuf:"fixed64,1,opt,name=part1" json:"part1,omitempty"`
	Part2 *int64 `protobuf:"fixed64,2,opt,name=part2" json:"part2,omitempty"`
}

func (x *QueryId) Reset() {
	*x = QueryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryId) ProtoMessage() {}

func (x *QueryId) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryId.ProtoReflect.Descriptor instead.
func (*QueryId) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{1}
}

func (x *QueryId) GetPart1() int64 {
	if x != nil && x.Part1 != nil {
		return *x.Part1
	}
	return 0
}

func (x *QueryId) GetPart2() int64 {
	if x != nil && x.Part2 != nil {
		return *x.Part2
	}
	return 0
}

type DrillPBError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId      *string                 `protobuf:"bytes,1,opt,name=error_id,json=errorId" json:"error_id,omitempty"` // for debug tracing purposes
	Endpoint     *exec.DrillbitEndpoint  `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	ErrorType    *DrillPBError_ErrorType `protobuf:"varint,3,opt,name=error_type,json=errorType,enum=exec.shared.DrillPBError_ErrorType" json:"error_type,omitempty"`
	Message      *string                 `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Exception    *ExceptionWrapper       `protobuf:"bytes,5,opt,name=exception" json:"exception,omitempty"`
	ParsingError []*ParsingError         `protobuf:"bytes,6,rep,name=parsing_error,json=parsingError" json:"parsing_error,omitempty"` //optional, used when providing location of error within a piece of text.
}

func (x *DrillPBError) Reset() {
	*x = DrillPBError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrillPBError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrillPBError) ProtoMessage() {}

func (x *DrillPBError) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrillPBError.ProtoReflect.Descriptor instead.
func (*DrillPBError) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{2}
}

func (x *DrillPBError) GetErrorId() string {
	if x != nil && x.ErrorId != nil {
		return *x.ErrorId
	}
	return ""
}

func (x *DrillPBError) GetEndpoint() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *DrillPBError) GetErrorType() DrillPBError_ErrorType {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return DrillPBError_CONNECTION
}

func (x *DrillPBError) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DrillPBError) GetException() *ExceptionWrapper {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *DrillPBError) GetParsingError() []*ParsingError {
	if x != nil {
		return x.ParsingError
	}
	return nil
}

type ExceptionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExceptionClass *string                     `protobuf:"bytes,1,opt,name=exception_class,json=exceptionClass" json:"exception_class,omitempty"`
	Message        *string                     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	StackTrace     []*StackTraceElementWrapper `protobuf:"bytes,3,rep,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	Cause          *ExceptionWrapper           `protobuf:"bytes,4,opt,name=cause" json:"cause,omitempty"`
}

func (x *ExceptionWrapper) Reset() {
	*x = ExceptionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExceptionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptionWrapper) ProtoMessage() {}

func (x *ExceptionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptionWrapper.ProtoReflect.Descriptor instead.
func (*ExceptionWrapper) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{3}
}

func (x *ExceptionWrapper) GetExceptionClass() string {
	if x != nil && x.ExceptionClass != nil {
		return *x.ExceptionClass
	}
	return ""
}

func (x *ExceptionWrapper) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ExceptionWrapper) GetStackTrace() []*StackTraceElementWrapper {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *ExceptionWrapper) GetCause() *ExceptionWrapper {
	if x != nil {
		return x.Cause
	}
	return nil
}

type StackTraceElementWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName      *string `protobuf:"bytes,1,opt,name=class_name,json=className" json:"class_name,omitempty"`
	FileName       *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	LineNumber     *int32  `protobuf:"varint,3,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	MethodName     *string `protobuf:"bytes,4,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	IsNativeMethod *bool   `protobuf:"varint,5,opt,name=is_native_method,json=isNativeMethod" json:"is_native_method,omitempty"`
}

func (x *StackTraceElementWrapper) Reset() {
	*x = StackTraceElementWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTraceElementWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTraceElementWrapper) ProtoMessage() {}

func (x *StackTraceElementWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTraceElementWrapper.ProtoReflect.Descriptor instead.
func (*StackTraceElementWrapper) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{4}
}

func (x *StackTraceElementWrapper) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *StackTraceElementWrapper) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *StackTraceElementWrapper) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *StackTraceElementWrapper) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *StackTraceElementWrapper) GetIsNativeMethod() bool {
	if x != nil && x.IsNativeMethod != nil {
		return *x.IsNativeMethod
	}
	return false
}

type ParsingError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartColumn *int32 `protobuf:"varint,2,opt,name=start_column,json=startColumn" json:"start_column,omitempty"`
	StartRow    *int32 `protobuf:"varint,3,opt,name=start_row,json=startRow" json:"start_row,omitempty"`
	EndColumn   *int32 `protobuf:"varint,4,opt,name=end_column,json=endColumn" json:"end_column,omitempty"`
	EndRow      *int32 `protobuf:"varint,5,opt,name=end_row,json=endRow" json:"end_row,omitempty"`
}

func (x *ParsingError) Reset() {
	*x = ParsingError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsingError) ProtoMessage() {}

func (x *ParsingError) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsingError.ProtoReflect.Descriptor instead.
func (*ParsingError) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{5}
}

func (x *ParsingError) GetStartColumn() int32 {
	if x != nil && x.StartColumn != nil {
		return *x.StartColumn
	}
	return 0
}

func (x *ParsingError) GetStartRow() int32 {
	if x != nil && x.StartRow != nil {
		return *x.StartRow
	}
	return 0
}

func (x *ParsingError) GetEndColumn() int32 {
	if x != nil && x.EndColumn != nil {
		return *x.EndColumn
	}
	return 0
}

func (x *ParsingError) GetEndRow() int32 {
	if x != nil && x.EndRow != nil {
		return *x.EndRow
	}
	return 0
}

type RecordBatchDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordCount                   *int32             `protobuf:"varint,1,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	Field                         []*SerializedField `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
	CarriesTwoByteSelectionVector *bool              `protobuf:"varint,3,opt,name=carries_two_byte_selection_vector,json=carriesTwoByteSelectionVector" json:"carries_two_byte_selection_vector,omitempty"`
	// The value is set when result set is disabled and its value corresponds to number
	// of rows affected by query (see JDBC java.sql.ResultSet#getUpdateCount())
	AffectedRowsCount *int32 `protobuf:"varint,4,opt,name=affected_rows_count,json=affectedRowsCount" json:"affected_rows_count,omitempty"`
}

func (x *RecordBatchDef) Reset() {
	*x = RecordBatchDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBatchDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBatchDef) ProtoMessage() {}

func (x *RecordBatchDef) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBatchDef.ProtoReflect.Descriptor instead.
func (*RecordBatchDef) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{6}
}

func (x *RecordBatchDef) GetRecordCount() int32 {
	if x != nil && x.RecordCount != nil {
		return *x.RecordCount
	}
	return 0
}

func (x *RecordBatchDef) GetField() []*SerializedField {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *RecordBatchDef) GetCarriesTwoByteSelectionVector() bool {
	if x != nil && x.CarriesTwoByteSelectionVector != nil {
		return *x.CarriesTwoByteSelectionVector
	}
	return false
}

func (x *RecordBatchDef) GetAffectedRowsCount() int32 {
	if x != nil && x.AffectedRowsCount != nil {
		return *x.AffectedRowsCount
	}
	return 0
}

type NamePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *NamePart_Type `protobuf:"varint,1,opt,name=type,enum=exec.shared.NamePart_Type" json:"type,omitempty"`
	Name  *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Child *NamePart      `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
}

func (x *NamePart) Reset() {
	*x = NamePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamePart) ProtoMessage() {}

func (x *NamePart) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamePart.ProtoReflect.Descriptor instead.
func (*NamePart) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{7}
}

func (x *NamePart) GetType() NamePart_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NamePart_NAME
}

func (x *NamePart) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NamePart) GetChild() *NamePart {
	if x != nil {
		return x.Child
	}
	return nil
}

type SerializedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorType     *common.MajorType  `protobuf:"bytes,1,opt,name=major_type,json=majorType" json:"major_type,omitempty"` // the type associated with this field.
	NamePart      *NamePart          `protobuf:"bytes,2,opt,name=name_part,json=namePart" json:"name_part,omitempty"`
	Child         []*SerializedField `protobuf:"bytes,3,rep,name=child" json:"child,omitempty"` // only in the cases of type == MAP or REPEAT_MAP or REPEATED_LIST
	ValueCount    *int32             `protobuf:"varint,4,opt,name=value_count,json=valueCount" json:"value_count,omitempty"`
	VarByteLength *int32             `protobuf:"varint,5,opt,name=var_byte_length,json=varByteLength" json:"var_byte_length,omitempty"`
	BufferLength  *int32             `protobuf:"varint,7,opt,name=buffer_length,json=bufferLength" json:"buffer_length,omitempty"`
}

func (x *SerializedField) Reset() {
	*x = SerializedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedField) ProtoMessage() {}

func (x *SerializedField) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedField.ProtoReflect.Descriptor instead.
func (*SerializedField) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{8}
}

func (x *SerializedField) GetMajorType() *common.MajorType {
	if x != nil {
		return x.MajorType
	}
	return nil
}

func (x *SerializedField) GetNamePart() *NamePart {
	if x != nil {
		return x.NamePart
	}
	return nil
}

func (x *SerializedField) GetChild() []*SerializedField {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *SerializedField) GetValueCount() int32 {
	if x != nil && x.ValueCount != nil {
		return *x.ValueCount
	}
	return 0
}

func (x *SerializedField) GetVarByteLength() int32 {
	if x != nil && x.VarByteLength != nil {
		return *x.VarByteLength
	}
	return 0
}

func (x *SerializedField) GetBufferLength() int32 {
	if x != nil && x.BufferLength != nil {
		return *x.BufferLength
	}
	return 0
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId          *int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	MemoryFootprint *int64 `protobuf:"varint,2,opt,name=memory_footprint,json=memoryFootprint" json:"memory_footprint,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{9}
}

func (x *NodeStatus) GetNodeId() int32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *NodeStatus) GetMemoryFootprint() int64 {
	if x != nil && x.MemoryFootprint != nil {
		return *x.MemoryFootprint
	}
	return 0
}

//
// Used by the server to report informations about the query state to the client
type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryState *QueryResult_QueryState `protobuf:"varint,1,opt,name=query_state,json=queryState,enum=exec.shared.QueryResult_QueryState" json:"query_state,omitempty"`
	QueryId    *QueryId                `protobuf:"bytes,2,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Error      []*DrillPBError         `protobuf:"bytes,3,rep,name=error" json:"error,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{10}
}

func (x *QueryResult) GetQueryState() QueryResult_QueryState {
	if x != nil && x.QueryState != nil {
		return *x.QueryState
	}
	return QueryResult_STARTING
}

func (x *QueryResult) GetQueryId() *QueryId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *QueryResult) GetError() []*DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

//
// Used by the server when sending query result data batches to the client
type QueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId           *QueryId        `protobuf:"bytes,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	RowCount          *int32          `protobuf:"varint,2,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	Def               *RecordBatchDef `protobuf:"bytes,3,opt,name=def" json:"def,omitempty"`
	AffectedRowsCount *int32          `protobuf:"varint,4,opt,name=affected_rows_count,json=affectedRowsCount" json:"affected_rows_count,omitempty"`
}

func (x *QueryData) Reset() {
	*x = QueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryData) ProtoMessage() {}

func (x *QueryData) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryData.ProtoReflect.Descriptor instead.
func (*QueryData) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{11}
}

func (x *QueryData) GetQueryId() *QueryId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *QueryData) GetRowCount() int32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *QueryData) GetDef() *RecordBatchDef {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *QueryData) GetAffectedRowsCount() int32 {
	if x != nil && x.AffectedRowsCount != nil {
		return *x.AffectedRowsCount
	}
	return 0
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query       *string                 `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Start       *int64                  `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	State       *QueryResult_QueryState `protobuf:"varint,3,opt,name=state,enum=exec.shared.QueryResult_QueryState" json:"state,omitempty"`
	User        *string                 `protobuf:"bytes,4,opt,name=user,def=-" json:"user,omitempty"`
	Foreman     *exec.DrillbitEndpoint  `protobuf:"bytes,5,opt,name=foreman" json:"foreman,omitempty"`
	OptionsJson *string                 `protobuf:"bytes,6,opt,name=options_json,json=optionsJson" json:"options_json,omitempty"`
	TotalCost   *float64                `protobuf:"fixed64,7,opt,name=total_cost,json=totalCost" json:"total_cost,omitempty"`
	QueueName   *string                 `protobuf:"bytes,8,opt,name=queue_name,json=queueName,def=-" json:"queue_name,omitempty"`
}

// Default values for QueryInfo fields.
const (
	Default_QueryInfo_User      = string("-")
	Default_QueryInfo_QueueName = string("-")
)

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{12}
}

func (x *QueryInfo) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *QueryInfo) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *QueryInfo) GetState() QueryResult_QueryState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return QueryResult_STARTING
}

func (x *QueryInfo) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return Default_QueryInfo_User
}

func (x *QueryInfo) GetForeman() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Foreman
	}
	return nil
}

func (x *QueryInfo) GetOptionsJson() string {
	if x != nil && x.OptionsJson != nil {
		return *x.OptionsJson
	}
	return ""
}

func (x *QueryInfo) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *QueryInfo) GetQueueName() string {
	if x != nil && x.QueueName != nil {
		return *x.QueueName
	}
	return Default_QueryInfo_QueueName
}

type QueryProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *QueryId                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type              *QueryType              `protobuf:"varint,2,opt,name=type,enum=exec.shared.QueryType" json:"type,omitempty"`
	Start             *int64                  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End               *int64                  `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
	Query             *string                 `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	Plan              *string                 `protobuf:"bytes,6,opt,name=plan" json:"plan,omitempty"`
	Foreman           *exec.DrillbitEndpoint  `protobuf:"bytes,7,opt,name=foreman" json:"foreman,omitempty"`
	State             *QueryResult_QueryState `protobuf:"varint,8,opt,name=state,enum=exec.shared.QueryResult_QueryState" json:"state,omitempty"`
	TotalFragments    *int32                  `protobuf:"varint,9,opt,name=total_fragments,json=totalFragments" json:"total_fragments,omitempty"`
	FinishedFragments *int32                  `protobuf:"varint,10,opt,name=finished_fragments,json=finishedFragments" json:"finished_fragments,omitempty"`
	FragmentProfile   []*MajorFragmentProfile `protobuf:"bytes,11,rep,name=fragment_profile,json=fragmentProfile" json:"fragment_profile,omitempty"`
	User              *string                 `protobuf:"bytes,12,opt,name=user,def=-" json:"user,omitempty"`
	Error             *string                 `protobuf:"bytes,13,opt,name=error" json:"error,omitempty"`
	VerboseError      *string                 `protobuf:"bytes,14,opt,name=verboseError" json:"verboseError,omitempty"`
	ErrorId           *string                 `protobuf:"bytes,15,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	ErrorNode         *string                 `protobuf:"bytes,16,opt,name=error_node,json=errorNode" json:"error_node,omitempty"`
	OptionsJson       *string                 `protobuf:"bytes,17,opt,name=options_json,json=optionsJson" json:"options_json,omitempty"`
	PlanEnd           *int64                  `protobuf:"varint,18,opt,name=planEnd" json:"planEnd,omitempty"`
	QueueWaitEnd      *int64                  `protobuf:"varint,19,opt,name=queueWaitEnd" json:"queueWaitEnd,omitempty"`
	TotalCost         *float64                `protobuf:"fixed64,20,opt,name=total_cost,json=totalCost" json:"total_cost,omitempty"`
	QueueName         *string                 `protobuf:"bytes,21,opt,name=queue_name,json=queueName,def=-" json:"queue_name,omitempty"`
	QueryId           *string                 `protobuf:"bytes,22,opt,name=queryId" json:"queryId,omitempty"`
	AutoLimit         *int32                  `protobuf:"varint,23,opt,name=autoLimit" json:"autoLimit,omitempty"`
}

// Default values for QueryProfile fields.
const (
	Default_QueryProfile_User      = string("-")
	Default_QueryProfile_QueueName = string("-")
)

func (x *QueryProfile) Reset() {
	*x = QueryProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProfile) ProtoMessage() {}

func (x *QueryProfile) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProfile.ProtoReflect.Descriptor instead.
func (*QueryProfile) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{13}
}

func (x *QueryProfile) GetId() *QueryId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QueryProfile) GetType() QueryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return QueryType_SQL
}

func (x *QueryProfile) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *QueryProfile) GetEnd() int64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *QueryProfile) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *QueryProfile) GetPlan() string {
	if x != nil && x.Plan != nil {
		return *x.Plan
	}
	return ""
}

func (x *QueryProfile) GetForeman() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Foreman
	}
	return nil
}

func (x *QueryProfile) GetState() QueryResult_QueryState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return QueryResult_STARTING
}

func (x *QueryProfile) GetTotalFragments() int32 {
	if x != nil && x.TotalFragments != nil {
		return *x.TotalFragments
	}
	return 0
}

func (x *QueryProfile) GetFinishedFragments() int32 {
	if x != nil && x.FinishedFragments != nil {
		return *x.FinishedFragments
	}
	return 0
}

func (x *QueryProfile) GetFragmentProfile() []*MajorFragmentProfile {
	if x != nil {
		return x.FragmentProfile
	}
	return nil
}

func (x *QueryProfile) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return Default_QueryProfile_User
}

func (x *QueryProfile) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *QueryProfile) GetVerboseError() string {
	if x != nil && x.VerboseError != nil {
		return *x.VerboseError
	}
	return ""
}

func (x *QueryProfile) GetErrorId() string {
	if x != nil && x.ErrorId != nil {
		return *x.ErrorId
	}
	return ""
}

func (x *QueryProfile) GetErrorNode() string {
	if x != nil && x.ErrorNode != nil {
		return *x.ErrorNode
	}
	return ""
}

func (x *QueryProfile) GetOptionsJson() string {
	if x != nil && x.OptionsJson != nil {
		return *x.OptionsJson
	}
	return ""
}

func (x *QueryProfile) GetPlanEnd() int64 {
	if x != nil && x.PlanEnd != nil {
		return *x.PlanEnd
	}
	return 0
}

func (x *QueryProfile) GetQueueWaitEnd() int64 {
	if x != nil && x.QueueWaitEnd != nil {
		return *x.QueueWaitEnd
	}
	return 0
}

func (x *QueryProfile) GetTotalCost() float64 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

func (x *QueryProfile) GetQueueName() string {
	if x != nil && x.QueueName != nil {
		return *x.QueueName
	}
	return Default_QueryProfile_QueueName
}

func (x *QueryProfile) GetQueryId() string {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return ""
}

func (x *QueryProfile) GetAutoLimit() int32 {
	if x != nil && x.AutoLimit != nil {
		return *x.AutoLimit
	}
	return 0
}

type MajorFragmentProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorFragmentId      *int32                  `protobuf:"varint,1,opt,name=major_fragment_id,json=majorFragmentId" json:"major_fragment_id,omitempty"`
	MinorFragmentProfile []*MinorFragmentProfile `protobuf:"bytes,2,rep,name=minor_fragment_profile,json=minorFragmentProfile" json:"minor_fragment_profile,omitempty"`
}

func (x *MajorFragmentProfile) Reset() {
	*x = MajorFragmentProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MajorFragmentProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MajorFragmentProfile) ProtoMessage() {}

func (x *MajorFragmentProfile) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MajorFragmentProfile.ProtoReflect.Descriptor instead.
func (*MajorFragmentProfile) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{14}
}

func (x *MajorFragmentProfile) GetMajorFragmentId() int32 {
	if x != nil && x.MajorFragmentId != nil {
		return *x.MajorFragmentId
	}
	return 0
}

func (x *MajorFragmentProfile) GetMinorFragmentProfile() []*MinorFragmentProfile {
	if x != nil {
		return x.MinorFragmentProfile
	}
	return nil
}

type MinorFragmentProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           *FragmentState         `protobuf:"varint,1,opt,name=state,enum=exec.shared.FragmentState" json:"state,omitempty"`
	Error           *DrillPBError          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	MinorFragmentId *int32                 `protobuf:"varint,3,opt,name=minor_fragment_id,json=minorFragmentId" json:"minor_fragment_id,omitempty"`
	OperatorProfile []*OperatorProfile     `protobuf:"bytes,4,rep,name=operator_profile,json=operatorProfile" json:"operator_profile,omitempty"`
	StartTime       *int64                 `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime         *int64                 `protobuf:"varint,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	MemoryUsed      *int64                 `protobuf:"varint,7,opt,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
	MaxMemoryUsed   *int64                 `protobuf:"varint,8,opt,name=max_memory_used,json=maxMemoryUsed" json:"max_memory_used,omitempty"`
	Endpoint        *exec.DrillbitEndpoint `protobuf:"bytes,9,opt,name=endpoint" json:"endpoint,omitempty"`
	LastUpdate      *int64                 `protobuf:"varint,10,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	LastProgress    *int64                 `protobuf:"varint,11,opt,name=last_progress,json=lastProgress" json:"last_progress,omitempty"`
}

func (x *MinorFragmentProfile) Reset() {
	*x = MinorFragmentProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinorFragmentProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinorFragmentProfile) ProtoMessage() {}

func (x *MinorFragmentProfile) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinorFragmentProfile.ProtoReflect.Descriptor instead.
func (*MinorFragmentProfile) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{15}
}

func (x *MinorFragmentProfile) GetState() FragmentState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return FragmentState_SENDING
}

func (x *MinorFragmentProfile) GetError() *DrillPBError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MinorFragmentProfile) GetMinorFragmentId() int32 {
	if x != nil && x.MinorFragmentId != nil {
		return *x.MinorFragmentId
	}
	return 0
}

func (x *MinorFragmentProfile) GetOperatorProfile() []*OperatorProfile {
	if x != nil {
		return x.OperatorProfile
	}
	return nil
}

func (x *MinorFragmentProfile) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *MinorFragmentProfile) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *MinorFragmentProfile) GetMemoryUsed() int64 {
	if x != nil && x.MemoryUsed != nil {
		return *x.MemoryUsed
	}
	return 0
}

func (x *MinorFragmentProfile) GetMaxMemoryUsed() int64 {
	if x != nil && x.MaxMemoryUsed != nil {
		return *x.MaxMemoryUsed
	}
	return 0
}

func (x *MinorFragmentProfile) GetEndpoint() *exec.DrillbitEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *MinorFragmentProfile) GetLastUpdate() int64 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *MinorFragmentProfile) GetLastProgress() int64 {
	if x != nil && x.LastProgress != nil {
		return *x.LastProgress
	}
	return 0
}

type OperatorProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputProfile             []*StreamProfile `protobuf:"bytes,1,rep,name=input_profile,json=inputProfile" json:"input_profile,omitempty"`
	OperatorId               *int32           `protobuf:"varint,3,opt,name=operator_id,json=operatorId" json:"operator_id,omitempty"`
	OperatorType             *int32           `protobuf:"varint,4,opt,name=operator_type,json=operatorType" json:"operator_type,omitempty"`
	SetupNanos               *int64           `protobuf:"varint,5,opt,name=setup_nanos,json=setupNanos" json:"setup_nanos,omitempty"`
	ProcessNanos             *int64           `protobuf:"varint,6,opt,name=process_nanos,json=processNanos" json:"process_nanos,omitempty"`
	PeakLocalMemoryAllocated *int64           `protobuf:"varint,7,opt,name=peak_local_memory_allocated,json=peakLocalMemoryAllocated" json:"peak_local_memory_allocated,omitempty"`
	Metric                   []*MetricValue   `protobuf:"bytes,8,rep,name=metric" json:"metric,omitempty"`
	WaitNanos                *int64           `protobuf:"varint,9,opt,name=wait_nanos,json=waitNanos" json:"wait_nanos,omitempty"`
}

func (x *OperatorProfile) Reset() {
	*x = OperatorProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorProfile) ProtoMessage() {}

func (x *OperatorProfile) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorProfile.ProtoReflect.Descriptor instead.
func (*OperatorProfile) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{16}
}

func (x *OperatorProfile) GetInputProfile() []*StreamProfile {
	if x != nil {
		return x.InputProfile
	}
	return nil
}

func (x *OperatorProfile) GetOperatorId() int32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *OperatorProfile) GetOperatorType() int32 {
	if x != nil && x.OperatorType != nil {
		return *x.OperatorType
	}
	return 0
}

func (x *OperatorProfile) GetSetupNanos() int64 {
	if x != nil && x.SetupNanos != nil {
		return *x.SetupNanos
	}
	return 0
}

func (x *OperatorProfile) GetProcessNanos() int64 {
	if x != nil && x.ProcessNanos != nil {
		return *x.ProcessNanos
	}
	return 0
}

func (x *OperatorProfile) GetPeakLocalMemoryAllocated() int64 {
	if x != nil && x.PeakLocalMemoryAllocated != nil {
		return *x.PeakLocalMemoryAllocated
	}
	return 0
}

func (x *OperatorProfile) GetMetric() []*MetricValue {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *OperatorProfile) GetWaitNanos() int64 {
	if x != nil && x.WaitNanos != nil {
		return *x.WaitNanos
	}
	return 0
}

type StreamProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records *int64 `protobuf:"varint,1,opt,name=records" json:"records,omitempty"`
	Batches *int64 `protobuf:"varint,2,opt,name=batches" json:"batches,omitempty"`
	Schemas *int64 `protobuf:"varint,3,opt,name=schemas" json:"schemas,omitempty"`
}

func (x *StreamProfile) Reset() {
	*x = StreamProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProfile) ProtoMessage() {}

func (x *StreamProfile) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProfile.ProtoReflect.Descriptor instead.
func (*StreamProfile) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{17}
}

func (x *StreamProfile) GetRecords() int64 {
	if x != nil && x.Records != nil {
		return *x.Records
	}
	return 0
}

func (x *StreamProfile) GetBatches() int64 {
	if x != nil && x.Batches != nil {
		return *x.Batches
	}
	return 0
}

func (x *StreamProfile) GetSchemas() int64 {
	if x != nil && x.Schemas != nil {
		return *x.Schemas
	}
	return 0
}

type MetricValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricId    *int32   `protobuf:"varint,1,opt,name=metric_id,json=metricId" json:"metric_id,omitempty"`
	LongValue   *int64   `protobuf:"varint,2,opt,name=long_value,json=longValue" json:"long_value,omitempty"`
	DoubleValue *float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
}

func (x *MetricValue) Reset() {
	*x = MetricValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValue) ProtoMessage() {}

func (x *MetricValue) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValue.ProtoReflect.Descriptor instead.
func (*MetricValue) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{18}
}

func (x *MetricValue) GetMetricId() int32 {
	if x != nil && x.MetricId != nil {
		return *x.MetricId
	}
	return 0
}

func (x *MetricValue) GetLongValue() int64 {
	if x != nil && x.LongValue != nil {
		return *x.LongValue
	}
	return 0
}

func (x *MetricValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

// Registry that contains list of jars, each jar contains its name and list of function signatures.
//Structure example:
//REGISTRY    -> Jar1.jar   -> upper(VARCHAR-REQUIRED)
//-> upper(VARCHAR-OPTIONAL)
//
//-> Jar2.jar   -> lower(VARCHAR-REQUIRED)
//-> lower(VARCHAR-OPTIONAL)
type Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jar []*Jar `protobuf:"bytes,1,rep,name=jar" json:"jar,omitempty"`
}

func (x *Registry) Reset() {
	*x = Registry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{19}
}

func (x *Registry) GetJar() []*Jar {
	if x != nil {
		return x.Jar
	}
	return nil
}

// Jar contains jar name and list of function signatures.
//Function signature is concatenation of function name and its input parameters.
type Jar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FunctionSignature []string `protobuf:"bytes,2,rep,name=function_signature,json=functionSignature" json:"function_signature,omitempty"`
}

func (x *Jar) Reset() {
	*x = Jar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jar) ProtoMessage() {}

func (x *Jar) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jar.ProtoReflect.Descriptor instead.
func (*Jar) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{20}
}

func (x *Jar) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Jar) GetFunctionSignature() []string {
	if x != nil {
		return x.FunctionSignature
	}
	return nil
}

type SaslMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mechanism *string     `protobuf:"bytes,1,opt,name=mechanism" json:"mechanism,omitempty"`
	Data      []byte      `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Status    *SaslStatus `protobuf:"varint,3,opt,name=status,enum=exec.shared.SaslStatus" json:"status,omitempty"`
}

func (x *SaslMessage) Reset() {
	*x = SaslMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserBitShared_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaslMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaslMessage) ProtoMessage() {}

func (x *SaslMessage) ProtoReflect() protoreflect.Message {
	mi := &file_UserBitShared_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaslMessage.ProtoReflect.Descriptor instead.
func (*SaslMessage) Descriptor() ([]byte, []int) {
	return file_UserBitShared_proto_rawDescGZIP(), []int{21}
}

func (x *SaslMessage) GetMechanism() string {
	if x != nil && x.Mechanism != nil {
		return *x.Mechanism
	}
	return ""
}

func (x *SaslMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SaslMessage) GetStatus() SaslStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return SaslStatus_SASL_UNKNOWN
}

var File_UserBitShared_proto protoreflect.FileDescriptor

var file_UserBitShared_proto_rawDesc = []byte{
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x1a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x32, 0x22, 0xad, 0x04, 0x0a, 0x0c,
	0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72,
	0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x09, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x4c, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x22, 0xd2, 0x01, 0x0a, 0x10,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x22, 0xc2, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x77,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x22, 0xe1,
	0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x66, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x73, 0x54, 0x77, 0x6f, 0x42,
	0x79, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x22, 0x1b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x01, 0x22, 0x99, 0x02,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x76, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x0b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x44, 0x72, 0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0xb8, 0x01,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x64, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x01, 0x2d, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x44, 0x72, 0x69,
	0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x01, 0x2d, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x06, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0x30, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x62, 0x69, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x01, 0x2d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x01, 0x2d, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x16,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x14, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72,
	0x69, 0x6c, 0x6c, 0x50, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x2e, 0x44, 0x72, 0x69, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6e, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x65, 0x61, 0x6b, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x4e,
	0x61, 0x6e, 0x6f, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x22, 0x6c, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x03, 0x6a, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4a, 0x61, 0x72, 0x52, 0x03, 0x6a, 0x61,
	0x72, 0x22, 0x48, 0x0a, 0x03, 0x4a, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x70, 0x0a, 0x0b, 0x53,
	0x61, 0x73, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x61, 0x73, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x35, 0x0a,
	0x0a, 0x52, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x49, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a,
	0x0d, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9e, 0x0b, 0x0a, 0x10, 0x43, 0x6f, 0x72, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x52,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x10,
	0x10, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x12, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4c,
	0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x51,
	0x55, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x43,
	0x41, 0x4e, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x17, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10,
	0x18, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x52, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x1c, 0x12, 0x11,
	0x0a, 0x0d, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10,
	0x1d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x1f,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x23, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x56, 0x52, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x24,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41,
	0x4e, 0x10, 0x25, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x55, 0x44, 0x55, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x27, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c,
	0x41, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x54, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x29, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4e,
	0x45, 0x53, 0x54, 0x10, 0x2a, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x52,
	0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x51, 0x55,
	0x45, 0x54, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x43, 0x41,
	0x4e, 0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x44, 0x42, 0x43, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x53, 0x43, 0x41, 0x4e, 0x10, 0x2d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x50, 0x52, 0x44, 0x42,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x2e, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x4f, 0x4e, 0x47, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x2f, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x55, 0x44, 0x55, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x30,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x53, 0x44, 0x42, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x53, 0x4f, 0x4e,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x54, 0x50,
	0x50, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10,
	0x33, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10,
	0x36, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x43, 0x41, 0x50, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x53, 0x43, 0x41, 0x4e, 0x10, 0x37, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x38, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f,
	0x57, 0x4b, 0x45, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x59, 0x53, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x3a,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x3b, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x50, 0x49, 0x56, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x10, 0x3c, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x10, 0x3d, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x54, 0x53, 0x56, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x10, 0x3e, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x44, 0x46, 0x35, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x43, 0x45,
	0x4c, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x48, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x41, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x52, 0x10, 0x42, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x43, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x52, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10,
	0x44, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x53, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x43,
	0x41, 0x4e, 0x10, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x46, 0x2a, 0x67, 0x0a, 0x0a, 0x53, 0x61, 0x73, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x53, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x41, 0x53, 0x4c, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x42, 0x6c, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x64,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48, 0x01,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x72,
	0x6f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
}

var (
	file_UserBitShared_proto_rawDescOnce sync.Once
	file_UserBitShared_proto_rawDescData = file_UserBitShared_proto_rawDesc
)

func file_UserBitShared_proto_rawDescGZIP() []byte {
	file_UserBitShared_proto_rawDescOnce.Do(func() {
		file_UserBitShared_proto_rawDescData = protoimpl.X.CompressGZIP(file_UserBitShared_proto_rawDescData)
	})
	return file_UserBitShared_proto_rawDescData
}

var file_UserBitShared_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_UserBitShared_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_UserBitShared_proto_goTypes = []interface{}{
	(RpcChannel)(0),                  // 0: exec.shared.RpcChannel
	(QueryType)(0),                   // 1: exec.shared.QueryType
	(FragmentState)(0),               // 2: exec.shared.FragmentState
	(CoreOperatorType)(0),            // 3: exec.shared.CoreOperatorType
	(SaslStatus)(0),                  // 4: exec.shared.SaslStatus
	(DrillPBError_ErrorType)(0),      // 5: exec.shared.DrillPBError.ErrorType
	(NamePart_Type)(0),               // 6: exec.shared.NamePart.Type
	(QueryResult_QueryState)(0),      // 7: exec.shared.QueryResult.QueryState
	(*UserCredentials)(nil),          // 8: exec.shared.UserCredentials
	(*QueryId)(nil),                  // 9: exec.shared.QueryId
	(*DrillPBError)(nil),             // 10: exec.shared.DrillPBError
	(*ExceptionWrapper)(nil),         // 11: exec.shared.ExceptionWrapper
	(*StackTraceElementWrapper)(nil), // 12: exec.shared.StackTraceElementWrapper
	(*ParsingError)(nil),             // 13: exec.shared.ParsingError
	(*RecordBatchDef)(nil),           // 14: exec.shared.RecordBatchDef
	(*NamePart)(nil),                 // 15: exec.shared.NamePart
	(*SerializedField)(nil),          // 16: exec.shared.SerializedField
	(*NodeStatus)(nil),               // 17: exec.shared.NodeStatus
	(*QueryResult)(nil),              // 18: exec.shared.QueryResult
	(*QueryData)(nil),                // 19: exec.shared.QueryData
	(*QueryInfo)(nil),                // 20: exec.shared.QueryInfo
	(*QueryProfile)(nil),             // 21: exec.shared.QueryProfile
	(*MajorFragmentProfile)(nil),     // 22: exec.shared.MajorFragmentProfile
	(*MinorFragmentProfile)(nil),     // 23: exec.shared.MinorFragmentProfile
	(*OperatorProfile)(nil),          // 24: exec.shared.OperatorProfile
	(*StreamProfile)(nil),            // 25: exec.shared.StreamProfile
	(*MetricValue)(nil),              // 26: exec.shared.MetricValue
	(*Registry)(nil),                 // 27: exec.shared.Registry
	(*Jar)(nil),                      // 28: exec.shared.Jar
	(*SaslMessage)(nil),              // 29: exec.shared.SaslMessage
	(*exec.DrillbitEndpoint)(nil),    // 30: exec.DrillbitEndpoint
	(*common.MajorType)(nil),         // 31: common.MajorType
}
var file_UserBitShared_proto_depIdxs = []int32{
	30, // 0: exec.shared.DrillPBError.endpoint:type_name -> exec.DrillbitEndpoint
	5,  // 1: exec.shared.DrillPBError.error_type:type_name -> exec.shared.DrillPBError.ErrorType
	11, // 2: exec.shared.DrillPBError.exception:type_name -> exec.shared.ExceptionWrapper
	13, // 3: exec.shared.DrillPBError.parsing_error:type_name -> exec.shared.ParsingError
	12, // 4: exec.shared.ExceptionWrapper.stack_trace:type_name -> exec.shared.StackTraceElementWrapper
	11, // 5: exec.shared.ExceptionWrapper.cause:type_name -> exec.shared.ExceptionWrapper
	16, // 6: exec.shared.RecordBatchDef.field:type_name -> exec.shared.SerializedField
	6,  // 7: exec.shared.NamePart.type:type_name -> exec.shared.NamePart.Type
	15, // 8: exec.shared.NamePart.child:type_name -> exec.shared.NamePart
	31, // 9: exec.shared.SerializedField.major_type:type_name -> common.MajorType
	15, // 10: exec.shared.SerializedField.name_part:type_name -> exec.shared.NamePart
	16, // 11: exec.shared.SerializedField.child:type_name -> exec.shared.SerializedField
	7,  // 12: exec.shared.QueryResult.query_state:type_name -> exec.shared.QueryResult.QueryState
	9,  // 13: exec.shared.QueryResult.query_id:type_name -> exec.shared.QueryId
	10, // 14: exec.shared.QueryResult.error:type_name -> exec.shared.DrillPBError
	9,  // 15: exec.shared.QueryData.query_id:type_name -> exec.shared.QueryId
	14, // 16: exec.shared.QueryData.def:type_name -> exec.shared.RecordBatchDef
	7,  // 17: exec.shared.QueryInfo.state:type_name -> exec.shared.QueryResult.QueryState
	30, // 18: exec.shared.QueryInfo.foreman:type_name -> exec.DrillbitEndpoint
	9,  // 19: exec.shared.QueryProfile.id:type_name -> exec.shared.QueryId
	1,  // 20: exec.shared.QueryProfile.type:type_name -> exec.shared.QueryType
	30, // 21: exec.shared.QueryProfile.foreman:type_name -> exec.DrillbitEndpoint
	7,  // 22: exec.shared.QueryProfile.state:type_name -> exec.shared.QueryResult.QueryState
	22, // 23: exec.shared.QueryProfile.fragment_profile:type_name -> exec.shared.MajorFragmentProfile
	23, // 24: exec.shared.MajorFragmentProfile.minor_fragment_profile:type_name -> exec.shared.MinorFragmentProfile
	2,  // 25: exec.shared.MinorFragmentProfile.state:type_name -> exec.shared.FragmentState
	10, // 26: exec.shared.MinorFragmentProfile.error:type_name -> exec.shared.DrillPBError
	24, // 27: exec.shared.MinorFragmentProfile.operator_profile:type_name -> exec.shared.OperatorProfile
	30, // 28: exec.shared.MinorFragmentProfile.endpoint:type_name -> exec.DrillbitEndpoint
	25, // 29: exec.shared.OperatorProfile.input_profile:type_name -> exec.shared.StreamProfile
	26, // 30: exec.shared.OperatorProfile.metric:type_name -> exec.shared.MetricValue
	28, // 31: exec.shared.Registry.jar:type_name -> exec.shared.Jar
	4,  // 32: exec.shared.SaslMessage.status:type_name -> exec.shared.SaslStatus
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_UserBitShared_proto_init() }
func file_UserBitShared_proto_init() {
	if File_UserBitShared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_UserBitShared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrillPBError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExceptionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTraceElementWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParsingError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBatchDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MajorFragmentProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinorFragmentProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserBitShared_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaslMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_UserBitShared_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_UserBitShared_proto_goTypes,
		DependencyIndexes: file_UserBitShared_proto_depIdxs,
		EnumInfos:         file_UserBitShared_proto_enumTypes,
		MessageInfos:      file_UserBitShared_proto_msgTypes,
	}.Build()
	File_UserBitShared_proto = out.File
	file_UserBitShared_proto_rawDesc = nil
	file_UserBitShared_proto_goTypes = nil
	file_UserBitShared_proto_depIdxs = nil
}
